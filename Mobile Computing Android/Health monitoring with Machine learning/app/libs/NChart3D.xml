<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NChart3D</name>
    </assembly>
    <members>
        <member name="T:NChart3D_Android.INChartCrosshairDelegate">
             <summary>
             The NChartCrosshairDelegate interface provides methods to handle crosshair movements.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartCrosshairDelegate.DidBeginMoving(NChart3D_Android.NChartCrosshair)">
             <summary>
             Report beginning of crosshair movements.
             
             </summary>
             <param name="crosshair">- pointer to the crosshair object that did begin moving.</param>
            </member>
        <member name="M:NChart3D_Android.INChartCrosshairDelegate.DidEndMoving(NChart3D_Android.NChartCrosshair)">
             <summary>
             Report ending of crosshair movements.
             
             </summary>
             <param name="crosshair">- pointer to the crosshair object that did end moving.</param>
            </member>
        <member name="M:NChart3D_Android.INChartCrosshairDelegate.DidMove(NChart3D_Android.NChartCrosshair)">
             <summary>
             Report crosshair movement.
             
             </summary>
             <param name="crosshair">- pointer to the crosshair object that did move.</param>
            </member>
        <member name="T:NChart3D_Android.INChartDelegate">
             <summary>
             The NChartDelegate interface provides methods to reflect changes which have appeared in the chart.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartDelegate.DidChangeZoomPhase(NChart3D_Android.NChart,NChart3D_Android.NChartEventPhase)">
             <summary>
             Report that zoom of the chart has changed its phase.
             
             See NChartEventPhase
             </summary>
             <param name="chart">- pointer to the chart instance.</param>
             <param name="phase">- phase of the zoom.</param>
            </member>
        <member name="M:NChart3D_Android.INChartDelegate.DidEndAnimating(NChart3D_Android.NChart,Java.Lang.Object,NChart3D_Android.NChartAnimationType)">
             <summary>
             Report that animation of chart object is done.
             
             See Com.nulana.NChart.NChartAnimationType
             </summary>
             <param name="chart">- pointer to the chart instance.</param>
             <param name="object">- pointer to the chart object instance.</param>
             <param name="animation">- type of animation that is done.</param>
            </member>
        <member name="M:NChart3D_Android.INChartDelegate.PointSelected(NChart3D_Android.NChart,NChart3D_Android.NChartPoint)">
             <summary>
             Report that user selected a chart point.
             
             See Com.nulana.NChart.NChartPoint
             </summary>
             <param name="chart">- pointer to the chart instance.</param>
             <param name="point">- point that was selected. May be null, which will tell that the user tapped an empty space of the chart.</param>
            </member>
        <member name="M:NChart3D_Android.INChartDelegate.TimeIndexChanged(NChart3D_Android.NChart,System.Double)">
             <summary>
             Report that the time index on time axis was changed. A change may appear if the user moves the handler on the time
             axis, plays back the time axis or if someone changed the current time index of time axis (see Com.nulana.NChart.NChartTimeAxis for
             details).
             
             </summary>
             <param name="chart">- pointer to the chart instance.</param>
             <param name="timeIndex">- new time index.</param>
            </member>
        <member name="T:NChart3D_Android.INChartLegendDelegate">
             <summary>
             The NChartLegendDelegate protocol provides methods to obtain legend interactions.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartLegendDelegate.SeriesClicked(NChart3D_Android.NChartSeries,NChart3D_Android.NChartLegend)">
             <summary>
             Series is clicked in the legend.
             
             </summary>
             <param name="series">- series that is clicked.</param>
             <param name="legend">- legend series belongs to.</param>
            </member>
        <member name="T:NChart3D_Android.INChartScaleLegendDelegate">
             <summary>
             The NChartScaleLegendDelegate interface provides methods to manage the contents of the scale legend.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartScaleLegendDelegate.StringRepresentationOfRange(Java.Lang.Number,Java.Lang.Number,NChart3D_Android.NChartScaleLegend)">
             <summary>
             Get the string representation of the scale legend entry by given values.
             
             </summary>
             <param name="scaleLegend">- scale legend to get the entry's string representation for.</param>
             <param name="from">- value staring the range represented by this entry. For example, if the range is [10; 20], 10 is passed.If the left boundary of the range is open, e.g. (-inf; 20], null is passed.</param>
             <param name="to">- value ending the range covered by this entry. For example, if the range is [10; 20], 20 is passed.If the right boundary of the range is open, e.g. [10; +inf), null is passed.</param>
             <returns>string representation of the entry. For example, it may be "10 .. 20", or "10 &lt; x &lt; 20". If null is returned(or no delegate is attached to the legend, or method is not implemented), the default conversion is used.Assuming the values in the scale are 10, 20, 30, the default conversion looks like this:"&gt; 30", "20 - 30", "10 - 20", "&lt; 10".</returns>
            </member>
        <member name="T:NChart3D_Android.INChartSeriesDataSource">
             <summary>
             The NChartSeriesDataSource interface provides methods to obtain data for the series.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartSeriesDataSource.ExtraPoints(NChart3D_Android.NChartSeries)">
             <summary>
             Extend array of points in series.
             Use this method to provide additional data for series. This method is called after you call
             <code>extendData</code> of <code>NChart</code>.
             The points from the array returned are _added_ to the series' array of points, so series will have more data.
             The maximal length of data array is determined by <code>pointsHistoryLength</code> property of <code>NChart</code>.
             
             </summary>
             <param name="series">- series to obtain the extra points for.</param>
             <returns>array of extra points.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSeriesDataSource.Image(NChart3D_Android.NChartSeries)">
             <summary>
             Get image for the series that is displayed in the legend. If null is returned or method is not implemented, the default
             image is used.
             
             See Com.nulana.NChart.NChartSeries
             </summary>
             <param name="series">- series to get image for.</param>
             <returns>the image for the series.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSeriesDataSource.Name(NChart3D_Android.NChartSeries)">
             <summary>
             Get name for the series.
             
             See Com.nulana.NChart.NChartSeries
             </summary>
             <param name="series">- series to obtain the name for.</param>
             <returns>the name for the series.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSeriesDataSource.Points(NChart3D_Android.NChartSeries)">
             <summary>
             Get array of points for the series.
             
             See Com.nulana.NChart.NChartSeries
             </summary>
             <param name="series">- series to obtain the points for.</param>
             <returns>an array of Com.nulana.NChart.NChartPoint instances where the data is stored.</returns>
            </member>
        <member name="T:NChart3D_Android.INChartSizeAxisDataSource">
             <summary>
             The NChartSizeAxisDataSource interface provides methods to control data on the size axis.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartSizeAxisDataSource.MaxSize(NChart3D_Android.NChartSizeAxis)">
             <summary>
             Get maximal size of markers on the screen in pixels.
             
             See Com.nulana.NChart.NChartSizeAxis
             </summary>
             <param name="sizeAxis">- the size axis to obtain the maximal size for.</param>
             <returns>the maximal size of the markers on the screen in pixels.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSizeAxisDataSource.MaxValue(NChart3D_Android.NChartSizeAxis)">
             <summary>
             Get maximal value of markers' sizes. If no implementation is provided, the maximal size is calculated according to
             the data.
             
             See Com.nulana.NChart.NChartSizeAxis
             </summary>
             <param name="sizeAxis">- the size axis to obtain the maximal value for.</param>
             <returns>the maximal value of the markers' sizes. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSizeAxisDataSource.MinSize(NChart3D_Android.NChartSizeAxis)">
             <summary>
             Get minimal size of markers on the screen in pixels.
             
             See Com.nulana.NChart.NChartSizeAxis
             </summary>
             <param name="sizeAxis">- the size axis to obtain the minimal size for.</param>
             <returns>the minimal size of the markers on the screen in pixels.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartSizeAxisDataSource.MinValue(NChart3D_Android.NChartSizeAxis)">
             <summary>
             Get minimal value of markers' sizes. If no implementation is provided, the minimal size is calculated according to
             the data.
             
             See Com.nulana.NChart.NChartSizeAxis
             </summary>
             <param name="sizeAxis">- the size axis to obtain the minimal value for.</param>
             <returns>the minimal value of markers' sizes. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="T:NChart3D_Android.INChartTimeAxisDataSource">
             <summary>
             The NChartTimeAxisDataSource interface provides methods to control data displayed on the time axis.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartTimeAxisDataSource.Timestamps(NChart3D_Android.NChartTimeAxis)">
             <summary>
             Get array timestamps available. They are strings representing ticks (for example, years, or some names).
             
             See Com.nulana.NChart.NChartTimeAxis
             </summary>
             <param name="timeAxis">- time axis to get timestamps for.</param>
             <returns>an array of timestamps.</returns>
            </member>
        <member name="T:NChart3D_Android.INChartValueAxisDataSource">
             <summary>
             The NChartValueAxisDataSource interface provides methods to control data displayed on value axis.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.DateStep(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get date step value for axis. If there is no implementation, the step, min and max values are beautified.
             This method is called in date mode of the value axis only. See <code>hasDates</code> method of the
             <code>NChartValueAxis</code> for details.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get the step value for.</param>
             <returns>number representing time interval of the date step value for the axis. It may be null that is equivalent tothe absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.DateToString(Java.Util.Date,System.Double,NChart3D_Android.NChartValueAxis)">
             <summary>
             Convert date to string.
             
             </summary>
             <param name="date">- date to convert.</param>
             <param name="tickInterval">- time interval between neighbor ticks in seconds.</param>
             <param name="axis">- axis to convert value for.</param>
             <returns>string representation of the date.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.DoubleToString(System.Double,NChart3D_Android.NChartValueAxis)">
             <summary>
             Convert double value to string.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to convert value for.</param>
             <param name="value">- value to convert.</param>
             <returns>string representation of the value.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.ExtraTicks(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get array of extra ticks for discrete axis.
             Use this method to provide additional ticks for axis. This method is called after you call
             <code>extendData</code> of <code>NChart</code>.
             The ticks from the array returned are _added_ to the axis' array of ticks, so axis will have more data.
             The maximal length of ticks array is determined by <code>pointsHistoryLength</code> property of <code>NChart</code>.
             Due to performance reasons you won't have access to the newly created ticks through the <code>ticks</code>
             method of the NChartValueAxis.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to obtain the extra ticks for.</param>
             <returns>array of extra ticks.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Length(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get length of axis in 3D scene units. If there is no implementation, 1 is used. See length of Com.nulana.NChart.NChartValueAxis for
             details.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get the length for.</param>
             <returns>the length of the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Max(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get the maximal value for the axis. If there is no implementation, the axis is assumed to be discrete and you should
             provide an array of ticks. If neither min and max nor an array of ticks are provided, the axis is assumed to be
             continuous and both min and max are calculated automatically based on the values for the series.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get the maximal value for.</param>
             <returns>the maximal value for the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.MaxDate(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get the maximal date for the axis. If there is no implementation, both min and max are calculated automatically based
             on the date from the series.
             <p />
             This method is called in date mode of the value axis only. See <code>hasDates</code> method of the
             <code>NChartValueAxis</code> for details.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get maximal date for.</param>
             <returns>the maximal date for the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Min(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get the minimal value for the axis. If there is no implementation, the axis is assumed to be discrete and you should
             provide an array of ticks. If neither min and max nor an array of ticks are provided, the axis is assumed to be
             continuous and both min and max are calculated automatically based on the values for the series.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get minimal value for.</param>
             <returns>the minimal value for the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.MinDate(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get the minimal date for the axis. If there is no implementation, both min and max are calculated automatically based
             on the date from the series.
             <p />
             This method is called in date mode of the value axis only. See <code>hasDates</code> method of the
             <code>NChartValueAxis</code> for details.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get minimal date for.</param>
             <returns>the minimal date for the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Name(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get the name that is displayed in the axis' caption.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get the name for.</param>
             <returns>the name of the axis.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Step(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get step value for axis. If there is no implementation, the step, min and max values are beautified.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get the step value for.</param>
             <returns>the step value for the axis. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDataSource.Ticks(NChart3D_Android.NChartValueAxis)">
             <summary>
             Get array of ticks for the discrete axis. You should provide it if min and max are not implemented. If they are
             implemented, the array of ticks is ignored. If neither min and max nor the array of ticks are provided, axis is
             assumed to be continuous and both min and max are calculated automatically based on the values for the series.
             
             See Com.nulana.NChart.NChartValueAxis
             </summary>
             <param name="axis">- axis to get an array of ticks for.</param>
             <returns>an array of strings that represent the ticks. It may be null that is equivalent to the absence of implementation.</returns>
            </member>
        <member name="T:NChart3D_Android.INChartValueAxisDelegate">
             <summary>
             The NChartValueAxisDelegate interface provides methods to handle user interactions with value axis.
             </summary>
            </member>
        <member name="M:NChart3D_Android.INChartValueAxisDelegate.TickTapped(System.String,System.Double,NChart3D_Android.NChartValueAxis)">
             <summary>
             Handle tick label tap.
             
             </summary>
             <param name="axis">- axis the tapped tick belongs to.</param>
             <param name="text">- string representation of the tick (that is shown on the chart).</param>
             <param name="value">- value of the tapped tick (the actual number behind the string).</param>
            </member>
        <member name="T:NChart3D_Android.NChart">
             <summary>
             The NChart class provides a container for the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.AdaptiveAntialiasing">
             <summary>
             Flag that determines if anti-aliasing is adaptive (true) or not (false). Adaptivity means that it is switched off
             automatically for the time-critical periods like user interactions or animation playing. This property takes effect
             if ShouldAntialias is true only. The default value is true.
             
             See ShouldAntialias
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.AlwaysPreserveZoomAndPosition">
             <summary>
             Flag determining if chart content always preserves zoom and position (true) or not (false). This flag takes effect in 3D
             mode only. If this flag is set to false, when you change the frame of the chart, 3D content will be zoomed and shifted
             to fit the screen. If this flag is set to true, you should call ResetTransformations to fit the content in the
             screen manually. The default value is false.
             <p />
             <br />The common use-case for this flag is when you smoothly change the size of the chart. For such resize
             session you should set this flag to true, and after the session you should probably call ResetTransformations.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.AutoScrollDuration">
             <summary>
             Duration of auto scroll in seconds. The default value is 0.25.
             
             See ExtendData
             See ShouldAutoScroll
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.AutoScrollLabel">
             <summary>
             Label that indicates whenever automatical scroll is switched on or off. The default value is null.
             This label takes effect in 2D mode only.
             
             See ShouldToggleAutoScrollByPan
             See ShouldAutoScroll
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Background">
             <summary>
             Brush that fills the chart's background.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Caption">
             <summary>
             Caption of the chart.
             
             See NChartCaption
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.CartesianSystem">
             <summary>
             Cartesian coordinates system used to store value axes and supplementary visual items.
             
             See NChartCartesianSystem
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Delegate">
             <summary>
             Chart delegate.
             
             See NChartDelegate
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.DrawIn3D">
             <summary>
             Flag that determines if a chart should be drawn in 3D (true) or in 2D (false). The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.IncrementalMinMaxMode">
             <summary>
             Incremental minimum and maximum calculation mode. This mode makes sense in streaming mode only. If the incremental
             mode is on, new minimum cannot be greater and new maximum cannot be less than the ones calculated on the previous
             datasets. The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.InitialPolarAngle">
             <summary>
             Initial rotation angle of the polar coordinate system in radians (has effect in 2D mode only).
             The default value is 0 (0 degrees).
             <p />
             This is the angle the chart is rotated back to if you call ResetTransformations method.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.InitialXAngle">
             <summary>
             Initial rotation angle around the X-Axis (horizontal axis) in radians (has effect in 3D mode only).
             The default value is -0.87 (-50 degrees).
             <p />
             This is the angle the chart is rotated back to if you call ResetTransformations method.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.InitialYAngle">
             <summary>
             Initial rotation angle around the Y-Axis (vertical axis) in radians (has effect in 3D mode only).
             The default value is 3.93 (225 degrees).
             <p />
             This is the angle the chart is rotated back to if you call ResetTransformations method.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.IsTransitionPlaying">
             <summary>
             Check if transition is playing.
             
             </summary>
             <returns>true if playing, false if not.</returns>
            </member>
        <member name="P:NChart3D_Android.NChart.Legend">
             <summary>
             Legend of the chart.
             
             See NChartLegend
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.LicenseKey">
             <summary>
             License key of product.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Margin">
             <summary>
             Margin of the chart that determines how far the content of chart starts from view's bounds. The default margin is
             zero on all sides.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.MaxZoom">
             <summary>
             Maximal zoom of the chart. After this zoom is reached by user interactions, chart starts bouncing zoom.
             The maximal zoom differs in 2D and 3D mode. In 2D mode the default value is recalculated each time the chart is
             layed out (by changing of the frame or by updating data) according to the data on the axes. In 3D the default
             value is 2.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.MinZoom">
             <summary>
             Minimal zoom of the chart. After this zoom is reached by user interactions, chart starts bouncing zoom.
             The minimal zoom differs in 2D and 3D mode. In 3D mode the default value is 0.5. In 2D it is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PermanentRotationX">
             <summary>
             Flag determining if permanent rotation around X-Axis is on (true), or off (false). The default value is false.
             Use this flag if you want the chart to rotate around X-Axis without any interactions. This property takes effect in
             3D mode only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PermanentRotationXSpeed">
             <summary>
             Speed of permanent rotation around X-Axis (in radians per second). The default value is 0.
             See GetPermanentRotationX for more info about permanent rotation.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PermanentRotationY">
             <summary>
             Flag determining if permanent rotation around Y-Axis is on (true), or off (false). The default value is false.
             Use this flag if you want the chart to rotate around Y-Axis without any interactions. This property takes effect in
             3D mode only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PermanentRotationYSpeed">
             <summary>
             Speed of permanent rotation around Y-Axis (in radians per second). The default value is 0.
             See GetPermanentRotationY for more info about permanent rotation.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Pivot">
             <summary>
             Pivot of the chart in the internal chart scene coordinates.
             <p />
             <br /> Use this property if you want to save and than restore position of the chart. This property works for 2D
             and 3D modes. Theoretically you can use this property to pan the chart programmatically, however it is better to use
             NChartValueAxis.ZoomToRegion.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PointSelectionEnabled">
             <summary>
             Flag determining if the chart points can be selected by tap (true) or not (false). The default value is true. If you do
             not want to select points by tap, it is better to disable selection, because it will save memory and boost the data
             updating.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PointsHistoryLength">
             <summary>
             Property that determines the maximal length of series' points array. The default value is 1000.
             The array of points in series is determined after UpdateData call (by querying points from series' data
             sources) and then can be extended after ExtendData call. The property <code>pointsHistoryLength</code>
             takes effect by using ExtendData only. The new points are added to the end of the points' array of the
             series and if the array exceeds the given length, first n points are deleted, where
             <code>n = array.length - pointsHistoryLength</code>.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PolarAngle">
             <summary>
             Rotation angle of the polar coordinate system in radians (has effect in 2D mode only).
             The default value is 0 (0 degrees).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.PolarSystem">
             <summary>
             Polar coordinates system used to store value axes and supplementary visual items.
             
             See NChartPolarSystem
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShadingModel">
             <summary>
             Shading model that is used in 3D mode. The default value is NChartShadingModelPhong.
             <p />
             <b>Note</b>: This property controls shading for the 3D charts like surfaces, columns, etc.
             Shading model for point markers is controlled through their brushes.
             <b>Note</b>: This property takes effect in 3D mode only.
             
             See IsDrawIn3D
             See NChartMarker
             See NChartShadingModel
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldAntialias">
             <summary>
             Flag that determines if the image should be anti-aliased (true) or not (false). Antialiasing makes the picture smoother,
             but impacts performance. The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldAutoScroll">
             <summary>
             Flag determining if chart should automatically scroll (true) or not (false) to the end if new data are added by the
             ExtendData call. The default value is false.
             This flag takes effect in 2D mode only.
             
             See ExtendData
             See ShouldToggleAutoScrollByPan
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldBouncePan">
             <summary>
             Flag that determines if pan should bounce (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldBounceZoom">
             <summary>
             Flag that determines if zoom should bounce (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldCalculate2DZoomBoundsAutomatically">
             <summary>
             Flag determining if zoom in 2D mode should be calculated automatically (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldConvertZoomToAllowed">
             <summary>
             Flag determining if all zoom should be converted to the allowed zoom modes (true) or not (false). The  default value is true.
             <p />
             If this flag is true, all the zoom directions are converted to the allowed zoom directions. For example,
             if only horizontal zoom is allowed, and user zooms in diagonal direction, chart is zoomed horizontally with this flag
             set to true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShouldToggleAutoScrollByPan">
             <summary>
             Flag determining if automatical scroll should be automatically toggled by pan (true) or not (false). The default value is false.
             If this flag is true, automatical scroll is switched on (ShouldAutoScroll is set to true) if user pans
             to the right-most position of the chart and switched off (ShouldAutoScroll is set to false) if user pans left.
             This flag takes effect in 2D mode only.
             
             See ShouldAutoScroll
             See ExtendData
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ShowFPS">
             <summary>
             Flag that determines if FPS rate should be displayed (true) or not (false). You may use this for debug purposes
             or if you are just curious, but it's a very bad idea to show FPS in production code, because it results in continuous
             rendering that loads CPU and consumes power. If FPS is off, the picture is re-rendered only if it's really needed.
             The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.SizeAxis">
             <summary>
             Size axis used to scale the sizes of markers.
             
             See NChartSizeAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.StreamingMode">
             <summary>
             Flag determining if streaming mode is enabled.  The default value is false.
             If streaming mode is set to true, pointSelectionEnabled is automatically set to false to boost the performance of data updating.
             See StreamData
             See IsPointSelectionEnabled
             See StreamData
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.TimeAxis">
             <summary>
             Time axis used to navigate through the time ticks.
             
             See NChartTimeAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.UseParallelProjection">
             <summary>
             Flag that determines if a chart use parallel projection (true) or perspective projection (false) in 3D-mode. The default
             value is false.
             <p />
             <b>Note</b>: This flag takes effect in 3D-mode only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.UserInteractionMode">
             <summary>
             Interaction mode used in the chart. The default is NChartUserInteraction.All.
             <p />
             <b>Note</b>: You can use multiple interactions concatenated with bitwise OR to specify the mask of what is available.
             
             See NChartUserInteraction
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.VersionInfo">
             <summary>
             Get version info.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.XAngle">
             <summary>
             Rotation angle around the X-Axis (horizontal axis) in radians (has effect in 3D mode only).
             The default value is -0.87 (-50 degrees).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.YAngle">
             <summary>
             Rotation angle around the Y-Axis (vertical axis) in radians (has effect in 3D mode only).
             The default value is 3.93 (225 degrees).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.Zoom">
             <summary>
             Zoom of the chart. The default zoom is 1 which corresponds to the fitting the chart to screen (both in 2D and 3D).
             The zooming is proportional. If you want non-proportional zoom in 2D mode, you should use
             NChartValueAxis.ZoomToRegion.
             If you want to alter the initial zoom, you should change the value of this property <b>after</b> UpdateData call.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ZoomMode">
             <summary>
             Zoom mode used in chart. The default is NChartZoomMode.Proportional.
             
             See NChartZoomMode
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChart.ZoomToPointMode">
             <summary>
             Flag that determines if chart is zoomed to the cursor (true) or to the screen center (false). The default value is false.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.AddScaleLegend(NChart3D_Android.NChartScaleLegend)">
             <summary>
             Add scale legend.
             See NChartScaleLegend
             </summary>
             <param name="scaleLegend">- scale legend to add.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.AddSeries(NChart3D_Android.NChartSeries)">
             <summary>
             Add series to chart.
             
             See NChartSeries
             </summary>
             <param name="series">- series to add.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.AddSeriesSettings(NChart3D_Android.NChartSeriesSettings)">
             <summary>
             Add global settings for the series. If you previously set some settings, they will be overwritten by new ones.
             
             See NChartSeriesSettings
             </summary>
             <param name="settings">- settings for the series.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.AlignCenter(System.Single)">
             <summary>
             Change position so that the chart is aligned to the center of the screen. This method takes effect in 3D mode only.
             
             </summary>
             <param name="duration">- duration of the animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.BeginTransaction">
             <summary>
             Begin data changing transaction. You should call this method before any changes of chart settings/data in separate
             thread. After the changes are made, you should call EndTransaction. The typical use-case of
             multithreading in NChart3D is the streaming - the realtime data updating.
             <p />
             <b>Note</b>: there is no sense to call this method in main thread.
             
             See IsStreamingMode
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.EndTransaction">
             <summary>
             End data changing transaction.
             
             See BeginTransaction
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.ExtendData">
             <summary>
             Force chart to extend the points arrays of series. Only newly added data are processed by this call.
             Minimums and maximums may change.
             Call this method always you want to extend the data array without changing old data. This method causes
             series to query new portion of data through <code>extraPoints(NChartSeries series);</code>
             call of their data sources. But you cannot extend the array of points forever, so there is a property
             GetPointsHistoryLength that determines the length of history.
             The difference with UpdateData is that only newly added points are processed and the array of these points is
             queried through <code>extraPoints(NChartSeries series);</code> call of
             <code>NChartSeriesDataSource</code>. This can save you time by updating large data sets.
             See also NChartSeriesDataSource.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.FitToScreen(System.Single)">
             <summary>
             Change zoom and position so that the chart fits the screen (with current rotation, if in 3D).
             
             </summary>
             <param name="duration">- duration of the animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.FlushChanges">
             <summary>
             Synchronize all the changes with visual appearance. You may call this method after all your data is updated (it means
             after you called UpdateData and NChart.PlayTransition because NChart.PlayTransition
             only says that transition should start playing and does not wait till it plays completely) to ensure that the visual
             appearance will be updated as soon as possible.
             You may call this method on the big dataset to reduce lag between your UpdateData call and actual updating.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.GetScaleLegends">
             <summary>
             Scale legends array. It's empty by default.
             See NChartScaleLegend
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.Series">
             <summary>
             Array of series.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.InitNativeLibrary">
             <summary>
             Normally you don't need to call this method.
             Native library initialized automatically when NChartView is loaded.
             Use this if you need NChart API before UI loaded to prevent UnsatisfiedLinkError.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.PlayTransition(System.Single,System.Boolean)">
             <summary>
             Play animated transition from old state to new one. The old state is cached automatically, so the only thing you need
             to do for animation is to change the series (by calling AddSeries / RemoveSeries / RemoveAllSeries) or data in
             the series (by updating data source and calling UpdateData) and than call this method.
             <br />State is cached when UpdateData is called.
             
             </summary>
             <param name="duration">- duration of transition's animation in seconds.</param>
             <param name="reverse">- flag determining if animation should be played in reverse.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.RebuildSeries">
             <summary>
             Force series to rebuild by reloading data from data source. Call this method when you know that the chart layout
             (including layout of axes, so min and max values) has not changed, but the data in series have. This method invokes
             UpdateSeries automatically. Data are not processed by this call, so values on axes remain unchanged. Use this method
             if you are absolutely sure minimums and maximums have not changed!
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.Relayout">
             <summary>
             Force chart to relayout. Call this method if you made some changes but do not want to update data. A call of
             UpdateData invokes relayout automatically.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveAllScaleLegends">
             <summary>
             Remove all scale legends.
             See NChartScaleLegend
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveAllSeries">
             <summary>
             Remove all series from chart.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveAllSeriesSettings">
             <summary>
             Remove all the global settings for the series.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveScaleLegend(NChart3D_Android.NChartScaleLegend)">
             <summary>
             Remove scale legend.
             See NChartScaleLegend
             </summary>
             <param name="scaleLegend">- scale legend to remove.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveSeries(NChart3D_Android.NChartSeries)">
             <summary>
             Remove series from chart.
             
             See NChartSeries
             </summary>
             <param name="series">- series to remove.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.RemoveSeriesSettings(Java.Lang.Class)">
             <summary>
             Remove all the global settings for the series by given class.
             
             </summary>
             <param name="settingsClass">- class of the series settings to remove.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.ResetTransformations(System.Single)">
             <summary>
             Reset all transformations to initial values.
             
             </summary>
             <param name="duration">- duration of animation from current transformations to the beginning.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.ResetTransition">
             <summary>
             Reset transition by cleaning up the cache made from the previous UpdateData call. Call this method if you want to
             see animation from the default start positions as if you just started the app.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.RotateAroundXToAngle(System.Single,System.Single,System.Single)">
             <summary>
             Rotate chart around the X-Axis (horizontal axis) with animation (has effect in 3D mode only).
             
             </summary>
             <param name="angle">- angle around the X-Axis in radians.</param>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.RotateAroundYToAngle(System.Single,System.Single,System.Single)">
             <summary>
             Rotate chart around the Y-Axis (vertical axis) with animation (has effect in 3D mode only).
             
             </summary>
             <param name="angle">- angle around the Y-Axis in radians.</param>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.RotatePolarToAngle(System.Single,System.Single,System.Single)">
             <summary>
             Rotate polar coordinate system with animation (has effect in 2D mode only).
             
             </summary>
             <param name="angle">- angle of the polar coordinate system in radians.</param>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChart.SeriesSettings(Java.Lang.Class)">
             <summary>
             Get settings of given settings class. If there were no settings set, default settings container for the given
             type is returned.
             
             See NChartSeriesSettings
             </summary>
             <param name="settingsClass">- class of the series settings to search for.</param>
             <returns>settings of the given class.</returns>
            </member>
        <member name="M:NChart3D_Android.NChart.StopTransition">
             <summary>
             Stop transition. This will stop all the transition animations, even if they are not played till the end or if they
             where delayed and did not even start animating.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.StreamData">
             <summary>
             Stream the data. This causes the updating of chart to display new states of points. The data are going to be
             processed, so minimum and maximum on the axes may change. Use this method in the following use-case: if your set
             of points was not changed, but the values in the states of points do, you can update the chart through this method
             much faster than through regular UpdateData.
             <br />
             <br /> <b>Note</b>: The difference with RebuildSeries is that this method <b>does not</b> reload data from data source,
             but <b>does</b> the optimized data processing (it's faster than regular data processing). Series will use the points they
             already have (the points are mutable, so you can change their data anywhere you want).
             <p />
             <br /> <b>Note</b>: The difference with UpdateSeries is that this method is even faster and <b>does</b> the optimized data
             processing. So use it to reflect some realtime "streaming" changes of data.
             <p />
             <br /> <b>Note</b>: This method requires IsStreamingMode to be on, pass true to SetStreamingMode for this.
             <p />
             <br /> <b>Note</b>: The first appearance of series should be initialized by the UpdateData call. Use this method to
             change the already displayed series only.
             <p />
             <br /> <b>Note</b>: If you want to change the data in separate thread, you should wrap all the data changing routines in the
             BeginTransaction and EndTransaction calls.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.UpdateData">
             <summary>
             Force chart to be updated. Call this method when you want to reload data from the data source and rebuild the chart.
             Data are processed by this call and minimums / maximums on axes are calculated.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.UpdateSeries">
             <summary>
             Force series to be updated without reloading data from data source. Call this method when you want to reflect
             some changes you made in the visual appearance of a series (brush, etc.). A call of RebuildSeries invokes
             this method automatically.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChart.ZoomTo(System.Single,System.Single,System.Single)">
             <summary>
             Zoom of the chart. The default zoom is 1 which corresponds to the fitting the chart to screen (both in 2D and 3D).
             The zooming is proportional. If you want non-proportional zoom in 2D mode, you should use 
             NChartValueAxis.ZoomToRegion.
             If you want to alter the initial zoom, you should change the value of this property <b>after</b> UpdateData call.
             
             </summary>
             <param name="zoom">- new zoom of the chart.</param>
             <param name="duration">- duration of animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="T:NChart3D_Android.NChartAnimationType">
             <summary>
             The AnimationType enum provides constants to indicate different animations of the chart objects.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAnimationType.Highlight">
             <summary>
             Animation of point highlighting.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAnimationType.Pan">
             <summary>
             Animation of pan.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAnimationType.Transition">
             <summary>
             Animation of transition from the one data set to the other.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAnimationType.Wheel">
             <summary>
             Animation of pie and polar coordinate system rotation.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAnimationType.Zoom">
             <summary>
             Animation of zoom.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAreaSeries">
             <summary>
             The NChartAreaSeries class provides methods to display area series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAreaSeries.GradientUniform">
             <summary>
             Flag determining if, in case of gradient brush, the area should have gradient that is interpolated from minimum to
             maximum values (true), or it should be reinterpolated in each value (false). The default value is false.
             <p />
             If this flag is NO and the area series has gradient brush, the gradient will probably look like a saw
             repeating the shape of the area. If this flag is true, the gradient looks linear and do not repeat the shape of the
             area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAreaSeries.Marker">
             <summary>
             Marker that is shown on the points. This is null by default (no marker is displayed).
             
             See NChartMarker
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAreaSeriesSettings">
             <summary>
             The NChartAreaSeriesSettings class provides global settings for Com.nulana.NChart.NChartAreaSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAutoScrollLabel">
             <summary>
             The NChartAutoScrollLabel provides methods to control the label that is shown whenever auto scroll mode of chart is
             toggled.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartAutoScrollLabel.#ctor">
             <summary>
             Create auto scroll label instance.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoScrollLabel.FadeTime">
             <summary>
             Fade time of the label (in seconds). The default value is 0.25.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoScrollLabel.OffText">
             <summary>
             Text that should appear on the label whenever auto scroll is OFF. The default value is null.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoScrollLabel.OnText">
             <summary>
             Text that should appear on the label whenever auto scroll is ON. The default value is null.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoScrollLabel.VisibleTime">
             <summary>
             Time the label is visible (in seconds). The default value is 1.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAutoZoomAxes">
             <summary>
             The NChartAutoZoomAxes enum provides constants to determine which axes should be zoomed automatically.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoZoomAxes.NormalAxis">
             <summary>
             Zoom normal axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoZoomAxes.SecondaryAxis">
             <summary>
             Zoom secondary axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAutoZoomAxes.ZoomBothAxes">
             <summary>
             Zoom both normal and secondary axes.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxesPlane">
             <summary>
             The NChartAxesPlane class provides methods to display the axes plane for the cartesian system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxesPlane.Color">
             <summary>
             Color of axes plane.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxesPlane.Width">
             <summary>
             Width of the axes plane in 3D scene units. Actually, one 3D scene unit is equal to half a screen size by the initial
             zoom (therefore the space of 3D scene is actually nonlinear respectively to the screen). Of course you can try to
             calculate out the value you need, but you would find it out easier experimentally. The default value is 0.05.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxis">
             <summary>
             The NChartAxis class provides common methods for axes on the chart.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisGrid">
             <summary>
             The NChartAxisGrid class provides storage for grid lines associated with the particular chart's axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.Color">
             <summary>
             Color of grid lines.
             If you set a color value to this property, this value is set to all grid lines (majorGridLines,
             minorGridLines and tinyGridLines). If you read a value of this property, color of majorGridLines is returned.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.LineDash">
             <summary>
             Dash of the grid lines.
             If you set a dash value to this property, this value is set to all grid lines (majorGridLines,
             minorGridLines and tinyGridLines). If you read a value of this property, thickness of majorGridLines is returned.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.MajorGridLines">
             <summary>
             Grid lines of the major ticks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.MinorGridLines">
             <summary>
             Grid lines of the minor ticks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.Thickness">
             <summary>
             Thickness of grid lines.
             If you set a thickness value to this property, this value is set to all grid lines (majorGridLines,
             minorGridLines and tinyGridLines). If you read a value of this property, thickness of majorGridLines is returned.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGrid.TinyGridLines">
             <summary>
             Grid lines of the tiny ticks.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartAxisGrid.GetInterlacedBackground">
             <summary>
             Array of brushes for interlaced background. If null, no interlaced background is displayed. The default value is null.
             Interlaced background means that the space between axis grid lines is filled with the colors that are
             consecutively taken from this array. The array is looped, so if there are less elements then spaces between grid
             lines, the sequence of colors is multiplied. The elements of the array should be objects NChartSolidColorBrush.
             Only NChartSolidColorBrush is supported, all other brushes (or other objects will be skipped).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartAxisGrid.SetInterlacedBackground(NChart3D_Android.NChartBrush[])">
             <summary>
             For details see GetInterlacedBackground
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisGridLines">
             <summary>
             The NChartAxisGridLine class provides methods to control particular grid lines of the chart's axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGridLines.Color">
             <summary>
             Color of the grid lines.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGridLines.LineDash">
             <summary>
             Dash of the grid lines.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisGridLines.Thickness">
             <summary>
             Thickness of the grid lines in pixels. The default value is 1.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisLabelsAlignment">
             <summary>
             The NChartAxisLabelsAlignment enum provides constants to align labels relative to the axes' thicks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisLabelsAlignment.Center">
             <summary>
             Align labels centered.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisLabelsAlignment.Left">
             <summary>
             Align labels left.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisLabelsAlignment.Right">
             <summary>
             Align labels right.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisPositionCoord">
             <summary>
             The NChartAxisPositionCoord class provides methods to control the position of the chart axis.
             Each Cartesian system axis has properties for X, Y and Z coordinates, but for every particular axis only two of them
             are meaningful. For example, for the X-Axis only Y and Z take effect, for Y-Axis only X and Z and so on. Each coordinate
             is associated with particular direction: X-coordinate is tied to the horizontal direction, Y to the vertical and
             Z to the depth. According to valueType, value and hostsOnSAxis of the coordinate, actual position in the
             corresponding direction is determined.<br />
             For example, to place Y-Axis so, that it intersects X-Axis in the value 10, use the following code:<br />
             <code>chartView.getChart().getCartesianSystem().getYAxis().getPositionX().setValue(10.0);</code><br />
             If you need Y-Axis to intersect SX-Axis in the value 10 instead, add the following:<br />
             <code>chartView.getChart().getCartesianSystem().getYAxis().getPositionX().setHostsOnSAxis(true);</code><br />
             The next code line added to the previous settings will make Y-Axis to intersect SX-Axis in its maximal value:<br />
             <code>chartView.getChart().getCartesianSystem().getYAxis().getPositionX().setValueType(NChartAxisPositionCoordValue.Maximum);</code>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoord.HostsOnSAxis">
             <summary>
             Flag determining if the position is calculated according to the secondary axis (true) or not (false).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoord.Value">
             <summary>
             Value of the coordinate. The default value is 0.<br />
             This property takes effect if valueType is set to <code>NChartAxisPositionCoordValue.Custom</code> only.
             If some value is assigned to this property, valueType is set to <code>NChartAxisPositionCoordValue.Custom</code>
             automatically.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoord.ValueType">
             <summary>
             Type of the coordinate value.<br />
             If this property is set to <code>NChartAxisPositionCoordValue.Custom</code>, position is calculated based on
             value. If <code>NChartAxisPositionCoordValue.Minimum</code> or <code>NChartAxisPositionCoordValue.Maximum</code>
             is set, position is calculated based on the corresponding axis' minimum or maximum respectively. The axis for the
             coordinate is chosen according to the actual property <code>NChartAxisPositionCoord</code> is assigned to and
             hostsOnSAxis.
             See NChartAxisPositionCoordValue
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisPositionCoordValue">
             <summary>
             The NChartAxisPositionCoordValue enum provides constants to determine which value should be used to calculate the
             position coordinate of the particular axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoordValue.Custom">
             <summary>
             The value is set by user.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoordValue.Maximum">
             <summary>
             Maximal value of the axis is obtained.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisPositionCoordValue.Minimum">
             <summary>
             Minimal value of the axis is obtained.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisTick">
             <summary>
             The NChartAxisTick class provides methods to manage ticks on the axes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTick.Color">
             <summary>
             Color of the ticks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTick.Length">
             <summary>
             Length of ticks in pixels. The default value is 10.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTick.Thickness">
             <summary>
             Thickness of ticks in pixels. The default value is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTick.Type">
             <summary>
             Type of ticks.
             
             See NChartAxisTickType
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartAxisTickType">
             <summary>
             The AxisTickType enum provides constants to determine the ticks' layout on the axes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTickType.Both">
             <summary>
             Ticks are both on the inner and outer sides of the axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTickType.Inner">
             <summary>
             Ticks are on the inner side of the axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartAxisTickType.Outer">
             <summary>
             Ticks are on the outer side of the axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBandSeries">
             <summary>
             The NChartBandSeries class provides methods to display band series. This series type is for 2D only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartBandSeries.HighBorderColor">
             <summary>
             Color for the high border.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartBandSeries.LowBorderColor">
             <summary>
             Color for the low border.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBandSeriesSettings">
             <summary>
             The NChartBandSeriesSettings class provides global settings for Com.nulana.NChart.NChartBandSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBarSeries">
             <summary>
             The NChartBarSeries class provides methods to display bar series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBarSeriesSettings">
             <summary>
             The NChartBarSeriesSettings class provides global settings for Com.nulana.NChart.NChartBarSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBezierInterpolator">
             <summary>
             The NChartBezierInterpolator class provides bezier interpolator. If it is used, the animated values will changed in
             time as follows: v(t) = (1 - t)^2 * v_from + 2 * t * (1 - t) * v_c + t^2 * v_from, where v_from, v_to are
             respectively the start and end values, v_c is control point and t is the time.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartBezierInterpolator.#ctor(System.Single)">
             <summary>
             Create the bezier iterpolator with given control point.
             
             </summary>
             <param name="controlPoint">- control point. Very often it makes sense when the control point is equal to the end value ofanimated property.</param>
            </member>
        <member name="P:NChart3D_Android.NChartBezierInterpolator.ControlPoint">
             <summary>
             Control point of bezier interpolator.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBrush">
             <summary>
             The NChartBrush class provides common methods of the brush that can be used to fill some areas.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartBrush.Opacity">
             <summary>
             Opacity of the brush in interval 0..1, 0 -- full transparency, 1 -- full opacity. The default value is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartBrush.ShadingModel">
             <summary>
             Shading model that should be applied to an object if it's painted with this brush. You should understand
             that different shading models are not always supported. For example, if you paint some background with the brush,
             only plain shading (read -- no shading) is possible. But if you paint some 3d-object, different models can be
             chosen (it is possible to draw this object as if it was lightened by some light source).
             
             See NChartShadingModel
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartBrush.Copy">
             <summary>
             Being implemented in every child this method will return proper deep copy of object.
             
             </summary>
             <returns>deep copy of brush object</returns>
            </member>
        <member name="M:NChart3D_Android.NChartBrush.ScaleColorHSV(System.Single,System.Single,System.Single)">
             <summary>
             Scale components of brush's colors (if any) according to HSV color model. HSV-representation of each component of
             each color is multiplied by corresponding scale factor.
             
             </summary>
             <param name="hScale">- scale for hue.</param>
             <param name="sScale">- scale for saturation.</param>
             <param name="vScale">- scale for value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartBrush.ScaleColorRGB(System.Single,System.Single,System.Single)">
             <summary>
             Scale components of brush's colors (if any) by given values. Each component of each color is multiplied by a
             corresponding scale factor.
             
             </summary>
             <param name="rScale">- scale for the red component.</param>
             <param name="gScale">- scale for the green component.</param>
             <param name="bScale">- scale for the blue component.</param>
            </member>
        <member name="T:NChart3D_Android.NChartBrushScale">
             <summary>
             The NChartBrushScale class provides scale that transforms values into brushes like a step mapping function.
             <br />
             The scale contains array of reference values and array of brushes. It returns brush for given value
             according to these arrays:
             <br />
             <pre>
             <code>
             brushs[n]
             values[n - 1]
             ...
             brushs[4]
             values[3]
             brushs[3]
             values[2]
             brushs[2]
             values[1]
             brushs[1]
             values[0]
             brushs[0]
             </code>
             </pre>
             This is equivalent to the following pseudo code:
             <pre>
             <code>
             if value &lt;= values[0] return brushes[0];
             if value &gt; values[i] and value &lt;= values[i + 1] return brush[i + 1];
             if value &gt; values[last] return brush[last]
             </code>
             </pre>
             <br />
             So the array of brushes should contain n elements and array of values should contain n - 1. Values should be sorted
             (NChartBrushScale does not sort them automatically). If they are not, it can lead to strange results. If brush index goes
             out of range, <code>null</code> is returned.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartBrushScale.#ctor(NChart3D_Android.NChartBrush[],Java.Lang.Number[])">
             <summary>
             Create new instance of NChartBrushScale with arrays of brushes and values.
             
             </summary>
             <param name="brushes">- array of brushes represented with NChartBrush</param>
             <param name="values">- array of values represented with Number</param>
            </member>
        <member name="P:NChart3D_Android.NChartBrushScale.Gradient">
             <summary>
             Flag determining if scale can return gradient colors. The default value is <code>true</code>.
             <br /> The gradient scale assumes that the array of brushes contains instances of NChartSolidColorBrush and
             linearly interpolates colors that correspond to the neighbor values.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartBrushScale.BrushForValue(Java.Lang.Number)">
             <summary>
             Get value for brush.
             
             </summary>
             <param name="value">- value to get brush for.</param>
             <returns>brush for given value.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartBrushScale.GetBrushes">
             <summary>
             Array of brushes.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartBrushScale.GetValues">
             <summary>
             Array of values.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBubbleSeries">
             <summary>
             The NChartBubbleSeries class provides methods to display bubble series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartBubbleSeries.Marker">
             <summary>
             Default marker of the series that is displayed as a bubble. It is null by default.
             
             See NChartMarker
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartBubbleSeriesSettings">
             <summary>
             The NChartBubbleSeries.Settings class provides global settings for Com.nulana.NChart.NChartBubbleSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCallout">
             <summary>
             The NChartCallout class provides methods to display tooltips as callouts.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.Distance">
             <summary>
             Distance from the chart's point to the callout's tooltip in the autodetected direction (in pixels). If this property
             is 0, <code>margin</code> is used to control this distance (and therefore you control the direction yourself).
             Otherwise, the direction is detected automatically. In case of pie it's median of the corresponding sector. In case
             of all other charts it's north-east direction. The default value is 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.LineColor">
             <summary>
             Color of the callout line. The default value is black color.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.LineThickness">
             <summary>
             Thickness of the callout line. The default value is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.LineToLabelConnectionPos">
             <summary>
             Position where the line connects to the label. The default value is NChartCalloutLineToLabelConnectionPos.Autodetect.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.LineType">
             <summary>
             Type of callout line. The default value is NChartCalloutLineTypeStraight.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.LocateByOrigin">
             <summary>
             Flag determining if callout should be located in the position specified by the origin property (true),
             or according to distance and <code>margin</code> properties (false). The default value is false.
             If this property is set to true, origin has effect, but <code>margin</code> and distance has no effect,
             and vice versa.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCallout.Origin">
             <summary>
             Position of the top left corner of callout in pixels based on view's coordinate system, but with zero point shifted
             to the top left corner of chart plot area. The default value is {0; 0}.
             This property has effect if locateByOrigin is set to true only.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCalloutLineToLabelConnectionPos">
             <summary>
             The NChartCalloutLineToLabelConnectionPos enum provides constants to determine the position where the line connects
             to the label in the callout.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.Autodetect">
             <summary>
             Detect the position automatically.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.BottomCenter">
             <summary>
             Connect in the center of the bottom edge.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.BottomLeft">
             <summary>
             Connect in the bottom left corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.BottomRight">
             <summary>
             Connect in the bottom right corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.CenterLeft">
             <summary>
             Connect in the center of the left edge.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.CenterRight">
             <summary>
             Connect in the center of the right edge.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.TopCenter">
             <summary>
             Connect in the center of the top edge.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.TopLeft">
             <summary>
             Connect in the top left corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineToLabelConnectionPos.TopRight">
             <summary>
             Connect in the top right corner.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCalloutLineType">
             <summary>
             The NChartCalloutLineType enum provides constants to determine the appearance of the callout line.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineType.Broken">
             <summary>
             Broken line.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCalloutLineType.Straight">
             <summary>
             Straight line.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCandlestickSeries">
             <summary>
             The NChartCandlestickSeries class provides methods to display candlestick series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCandlestickSeries.NegativeBorderColor">
             <summary>
             Color for the border of negative candles.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCandlestickSeries.PositiveBorderColor">
             <summary>
             Color for the border of positive candles.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCandlestickSeriesSettings">
             <summary>
             The NChartCandlestickSeriesSettings class provides global settings for Com.nulana.NChart.NChartCandlestickSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCandlestickSeriesSettings.CylindersResolution">
             <summary>
             The resolution of cylinders. Resolution is the amount of vertices that build the circle.
             <br />For example if you want to get a square candlestick, you should set resolution to 4. If you want to get a cylindrical
             candlestick, you may set a larger value. But the larger is the resolution, the more memory is used and the slower the
             rendering will be, so you should find out the minimal acceptable value. A good value for cylinder is 16 or 20.
             The default value is 20.
             <br />
             <b>Note</b>: This value cannot be less than 3 and greater than 32.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCandlestickSeriesSettings.ShowShadowEndingLines">
             <summary>
             Flag determining whether horizontal lines on the ending of lower and upper candlestick shadows are shown (true) or
             hidden (false). The default value is true.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCaption">
             <summary>
             The NChartCaption class provides methods to display caption of the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaption.BlockAlignment">
             <summary>
             Alignment of the caption. The default value is NChartCaptionBlockAlignment.TopCenter.
             
             See NChartCaptionBlockAlignment
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCaptionBlockAlignment">
             <summary>
             The NChartCaptionBlockAlignment enum provides constants to control position of the caption's block.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.BottomCenter">
             <summary>
             Align caption at the center on the bottom of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.BottomLeft">
             <summary>
             Align caption in the bottom left corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.BottomRight">
             <summary>
             Align caption in the bottom right corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.TopCenter">
             <summary>
             Align caption at the center on the top of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.TopLeft">
             <summary>
             Align caption in the top left corner.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCaptionBlockAlignment.TopRight">
             <summary>
             Align caption in the top right corner.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCartesianSystem">
             <summary>
             The NChartCartesianSystem class provides methods for managing the chart's cartesian coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.AutoZoomAxes">
             <summary>
             The axes kind (normal, secondary or both) to be auto-zoomed. The default value is NChartAutoZoomNormalAxis.
             The axes set to be auto-zoomed are zoomed by panning so that the visible part of the chart is fit to the
             plot area, if ShouldAutoZoom is true. If axes are not swapped (you are not using bar series), the axes to zoom are
             Y and SY. In other case, they are X and SX.
             This property takes effect in 2D mode only.
             It is strongly recommended to disable the user interactions related to the direction of the axes which should be
             zoomed automatically. For example, if you set autoZoomAxes to <code>NChartAutoZoomAxes.NormalAxis</code>,
             and the axis are not swapped (you are not using bar series, so the axes to zoom are Y and SY), you are recommended
             to disable proportional zoom, vertical zoom and vertical pan:
             <code>m_view.getChart().setUserInteractions((m_view.getChart().getUserInteractionMode()) ^ (NChartUserInteraction.ProportionalZoom | NChartUserInteraction.VerticalZoom | NChartUserInteraction.VerticalMove));</code>,
             as well as to set the NChart.SetZoomMode to directional:
             <code>m_view.getChart().setZoomMode(NChartZoomMode.Directional);</code>
             See also NChartAutoZoomAxes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.BorderColor">
             <summary>
             Color of the border around the cartesian coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.BorderThickness">
             <summary>
             Thickness of the border around the cartesian coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.BorderVisible">
             <summary>
             Flag that determines if the border around the cartesian coordinate system is visible (true) or not (false).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SXAlongY">
             <summary>
             Grid that goes from secondary the X-axis along the Y-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SXAlongZ">
             <summary>
             Grid that goes from secondary the X-axis along the Z-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SXAxis">
             <summary>
             Secondary X-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SYAlongX">
             <summary>
             Grid that goes from secondary the Y-axis along the X-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SYAlongZ">
             <summary>
             Grid that goes from secondary the Y-axis along the Z-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SYAxis">
             <summary>
             Secondary Y-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SZAlongX">
             <summary>
             Grid that goes from secondary the Z-axis along the X-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SZAlongY">
             <summary>
             Grid that goes from secondary the Z-axis along the Y-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.SZAxis">
             <summary>
             Secondary Z-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.ShouldAutoZoom">
             <summary>
             Flag determining if auto zoom mode is on (true), or off (false). The default value is false.
             In auto zoom mode, the axis set to be auto-zoomed by the SetAutoZoomAxes property is zoomed
             automatically so that the visible part of the chart is fit to the plot area.
             This property takes effect in 2D mode only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.ValueAxesType">
             <summary>
             Type of axes. You may use additional and percent axes only if you provide ticks for category axes. For example, if
             you are about to display additional columns, you should provide ticks for the X and Z axes. If you are about to
             display additional bars, you should provide ticks for Y and Z axes respectively (because bars are stretched along
             the X-axis).
             If you didn't provide ticks for category axes, changing the type to additional or percent takes no effect for the
             series displayed even though states of their points are aligned to the grid (see NChartPointState for details).
             
             See NChartValueAxesType
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.XAlongY">
             <summary>
             Grid that goes from the X-axis along the Y-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.XAlongZ">
             <summary>
             Grid that goes from the X-axis along the Z-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.XAxis">
             <summary>
             X-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.XYPlane">
             <summary>
             XY-axes plane of the cartesian coordinate system.
             
             See NChartAxesPlane
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.XZPlane">
             <summary>
             XZ-axes plane of the cartesian coordinate system.
             
             See NChartAxesPlane
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.YAlongX">
             <summary>
             Grid that goes from the Y-axis along the X-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.YAlongZ">
             <summary>
             Grid that goes from the Y-axis along the Z-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.YAxis">
             <summary>
             Y-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.YZPlane">
             <summary>
             YZ-axes plane of the cartesian coordinate system.
             
             See NChartAxesPlane
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.ZAlongX">
             <summary>
             Grid that goes from the Z-axis along the X-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.ZAlongY">
             <summary>
             Grid that goes from the Z-axis along the Y-axis.
             
             See NChartAxisGrid
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCartesianSystem.ZAxis">
             <summary>
             Z-axis of the cartesian coordinate system.
             
             See NChartValueAxis
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartCartesianSystem.AddCrosshair(NChart3D_Android.NChartCrosshair)">
             <summary>
             Add crosshair to the cartesian system.
             
             See NChartCrosshair
             </summary>
             <param name="crosshair">- crosshair to add.</param>
            </member>
        <member name="M:NChart3D_Android.NChartCartesianSystem.RemoveAllCrosshairs">
             <summary>
             Remove all crosshairs from the cartesian system.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartCartesianSystem.RemoveCrosshair(NChart3D_Android.NChartCrosshair)">
             <summary>
             Remove crosshair from the cartesian system.
             
             See NChartCrosshair
             </summary>
             <param name="crosshair">- crosshair to remove.</param>
            </member>
        <member name="M:NChart3D_Android.NChartCartesianSystem.UpdateCrosshairs">
             <summary>
             Force crosshairs to be updated.
             Use this method if you changed values of crosshairs and want to apply them without calling
             <code>updateData</code> of the chart. If crosshairs are the only changed chart items, this is much more efficient way
             to make the changes visible than updating entire chart.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartColumnAnimationType">
             <summary>
             The NChartColumnAnimationType enum provides constants to control transition animation of column series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnAnimationType.OneByOne">
             <summary>
             Animate series one by one.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnAnimationType.Simultaneously">
             <summary>
             Animate all series simultaneously.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartColumnSeries">
             <summary>
             The NChartColumnSeries class provides methods to display column series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartColumnSeriesSettings">
             <summary>
             NChartColumnSeriesSettings class provides global settings for Com.nulana.NChart.NChartColumnSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.AnimationType">
             <summary>
             Animation type of the transition. The default value is <code>NChartColumnAnimationType.Simultaneously</code>.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.ColumnGroupFillRatio">
             <summary>
             Column group fill ratio for series that determines the amount of place for one column group.
             For example, if this fill ratio is 1.0, columns in the group are sticked together with no gaps between them.
             If the fill ratio is 0.5, columns in the group have gaps and the total width of the gaps is equal to the total width all columns in the group.
             <p />
             <br />The default value is 1.0.
             <br />The difference from <code>fillRatio</code> is that <code>fillRatio</code> deals with the gap
             between column groups and <code>columnGroupFillRatio</code> is responsible for the gap between columns inside the group.
             
             See ShouldGroupColumns
             See GetFillRatio
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.CornerRadius">
             <summary>
             Corner radius of the columns relative to the actual column width. The default value is 0.
             If the radius is 0, columns have sharp corners. If the radius is 1, columns have rounded corners with the
             radius equal to the half of the columns' width.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.CylindersResolution">
             <summary>
             Resolution is the amount of vertices that build the circle. For example if you want to
             get a square column, you should set resolution to 4. If you want to get a cylindrical column, you may set a larger
             value. But the larger is the resolution, the more memory is used and the slower the rendering will be, so you should
             find out the minimal acceptable value. A good value for cylinder is 16 or 20.
             <br />The default value is 4.
             <br />This value cannot be less than 3 and greater than 32.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.ShouldGroupColumns">
             <summary>
             Flag that determines if columns should be grouped in the coordinate system cells (true), or not (false). The default
             value is true.
             <br />
             If you have a lot of points that share the same cells, it is good idea to set this flag to true
             (to let the default), so the columns sharing the cell are distributed in it. However if you have more than one
             series which points are not sharing the same cells (for example, each series has only one point that monopolizes the
             cell), it is better to set this flag to false, so the points are not distributed and each one takes its whole cell.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartColumnSeriesSettings.ShouldSmoothCylinders">
             <summary>
             Flag that determines if cylinders should appear smooth (true) of faced (false). Generally if you specify low resolution
             (see SetCylindersResolution for details) when the individual faces are still visible, it is a good idea to have
             cylinders faced and vice versa.
             <br />The default value is false.
             <br />If cylinders are faced, it consumes more memory than if they don't by the same resolution.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCoordSystem">
             <summary>
             The NChartCoordSystem class provides basic methods for managing the chart's coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCoordSystem.Margin">
             <summary>
             Margin of the coordinate system.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCrosshair">
             <summary>
             The NChartCrosshair class provides methods to control crosshairs - lines that are perpendicular to the axes and are
             to mark some position on the chart. Single chart can have multiple crosshairs either connected to the chart points or
             free (with user defined coordinates).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartCrosshair.#ctor(System.Int32,System.Single,NChart3D_Android.NChartPoint)">
             <summary>
             Create crosshair with color, thickness and target point.
             
             </summary>
             <param name="color">- color of the crosshair.</param>
             <param name="thickness">- thickness of the crosshair.</param>
             <param name="targetPoint">- tracking point of the crosshair.</param>
            </member>
        <member name="M:NChart3D_Android.NChartCrosshair.#ctor">
             <summary>
             Create crosshair.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.Delegate">
             <summary>
             Crosshair delegate.
             <p />
             For details see NChartCrosshairDelegate
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.Image">
             <summary>
             Image that is displaying in the crosshair. The default value is null.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.ImageOffset">
             <summary>
             Offset in pixels of the image from the crosshair's center. The default value is (0,0).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.LineDash">
             <summary>
             Dash of the crosshair.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.ShouldJumpToTouch">
             <summary>
             Flag determining if the crosshair should move to the touch wherever the touch location is. The default value is false.
             If this flag is true, all the touches are catched by the topmost crosshair (the one that was last added to
             the cartesian system of the chart). So no other user interactions like pan and point selection are possible in the
             chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.TargetPoint">
             <summary>
             Target point for the crosshair.
             <p />
             Use this property to set crosshair to track chart point.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.Thickness">
             <summary>
             Thickness of the crosshair in pixels. The default value is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.XHair">
             <summary>
             Hair for X-Axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.YHair">
             <summary>
             Hair for Y-Axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshair.ZHair">
             <summary>
             Hair for Z-Axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartCrosshairTooltipPosition">
             <summary>
             The NChartCrosshairTooltipPosition enum provides constants to control position of crosshair's tooltips.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshairTooltipPosition.ByMax">
             <summary>
             Tooltip near the maximum of the corresponding axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartCrosshairTooltipPosition.ByMin">
             <summary>
             Tooltip near the minimum of the corresponding axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartDataSmoother">
             <summary>
             The NChartDataSmoother class provides basic data smoother used to create smooth charts by only a few points.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartDataSmoother.Resolution">
             <summary>
             Resolution of the spline. Resolution is the number of subdivisions by the step dimension for each segment.
             The default value is 32. The allowed value are [2 .. 1024].
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartDataSmoother.StepDimension">
             <summary>
             Key of the value that should be interpreted as step dimension. Typically it is NChartValueX (which is the default
             value), however for bar series it should be NChartValueY.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartDataSmoother.ValueDimension">
             <summary>
             Key of the value that should be interpreted as height dimension. Typically it is NChartValueY (which is the default
             value), however for bar series it should be NChartValueX.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartDataSmootherLagrange">
             <summary>
             The NChartDataSmootherLagrange class provides data smoother based on Lagrange polynoms used to create smooth lines
             on the charts by only a few points. Typically this smoother is used for line and area series.
             <p />
             This smoother ensures the best smoothing in comparison with NChartDataSmootherTBezier and
             NChartDataSmootherSBezier, but has large deviation from the linear data interpolation (even larger than
             NChartDataSmooterSpline) and can produce large fake extremums. It may be good for some, but generally it's
             recommended to use NChartDataSmootherTBezier instead.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartDataSmootherSBezier">
             <summary>
             The NChartDataSmootherSBezier class provides data smoother based on bezier interpolation
             (with control points calculated to ensure defect 1 spline) used to create smooth lines on the charts by only a few points.
             Typically this smoother is used for line and area series.
             <p />
             This smoother ensures better smoothing in comparison with NChartDataSmootherTBezier, but has larger deviation
             from the linear data interpolation and can produce fake extremums. However, the deviation of the fake extremums is
             smaller in comparison with NChartDataSmootherSpline and NChartDataSmootherLagrange.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartDataSmootherSpline">
             <summary>
             The NChartDataSmootherSpline class provides data smoother based on cubic defect 1 splines used to create smooth lines
             on the charts by only a few points. Typically this smoother is used for line and area series.
             <p />
             This smoother ensures the best smoothing in comparison with NChartDataSmootherTBezier and
             NChartDataSmootherSBezier, but has large deviation from the linear data interpolation and can produce large fake
             extremums.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartDataSmootherTBezier">
             <summary>
             The NChartDataSmootherTBezier class provides data smoother based on bezier interpolation
             (with control points calculated according to tangents to the curve being smoothed)
             used to create smooth lines on the charts by only a few points.
             Typically this smoother is used for line and area series.
             <p />
             This smoother ensures minimal deviation from the linear data interpolation (in comparison with
             NChartDataSmootherSpline, NChartDataSmootherLagrange and NChartDataSmootherSBezier) and guarantees the absence
             of fake extremums.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartEventPhase">
             <summary>
             The NChartEventState enum provides constants to indicate different phases of chart events.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartEventPhase.Began">
             <summary>
             Beginning phase of the event.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartEventPhase.Changed">
             <summary>
             Changing phase of the event.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartEventPhase.Ended">
             <summary>
             Ending phase of the event.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartFont">
             <summary>
             NChartFont is an immutable container for three font characteristics: name, style and size.
             Except size it acts like Android <code>Typeface</code> class.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html">http://developer.android.com/reference/android/graphics/Typeface.html</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.FontDefault">
             <summary>
             System default font.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT">http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.FontDefaultBold">
             <summary>
             System default bold font.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT_BOLD">http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT_BOLD</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.FontMonospace">
             <summary>
             System <span style="font-family: monospace;">monospace</span> font.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#MONOSPACE">http://developer.android.com/reference/android/graphics/Typeface.html#MONOSPACE</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.FontSansSerif">
             <summary>
             System <span style="font-family: sans-serif;">sans serif</span> font.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#SANS_SERIF">http://developer.android.com/reference/android/graphics/Typeface.html#SANS_SERIF</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.FontSerif">
             <summary>
             System <span style="font-family: serif;">serif</span> font.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#SERIF">http://developer.android.com/reference/android/graphics/Typeface.html#SERIF</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.StyleBold">
             <summary>
             Style <b>bold</b>.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#BOLD">http://developer.android.com/reference/android/graphics/Typeface.html#BOLD</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.StyleBoldItalic">
             <summary>
             Style <b><i>bold italic</i></b>.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#BOLD_ITALIC">http://developer.android.com/reference/android/graphics/Typeface.html#BOLD_ITALIC</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.StyleItalic">
             <summary>
             Style <i>italic</i>.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#ITALIC">http://developer.android.com/reference/android/graphics/Typeface.html#ITALIC</a>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFont.StyleNormal">
             <summary>
             Default style.
             
             See <a target="_blank" href="http://developer.android.com/reference/android/graphics/Typeface.html#NORMAL">http://developer.android.com/reference/android/graphics/Typeface.html#NORMAL</a>
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartFont.#ctor(System.String,System.Int32,System.Single)">
             <summary>
             Creates a font with the specified characteristics.
             
             </summary>
             <param name="name">one of the constants predefined above or any other existing font name</param>
             <param name="style">one of the style constants predefined above</param>
             <param name="size">font size in <b>density independent points</b></param>
            </member>
        <member name="M:NChart3D_Android.NChartFont.#ctor(System.Single)">
             <summary>
             Creates system default font with normal style.
             
             </summary>
             <param name="size">font size in <b>density independent points</b></param>
            </member>
        <member name="P:NChart3D_Android.NChartFont.Name">
             <summary>
             May return font name passed to constructor NChartFont or FontDefault if NChartFont was used.
             <br />
             Read-only field.
             
             </summary>
             <returns>font name</returns>
            </member>
        <member name="P:NChart3D_Android.NChartFont.Size">
             <summary>
             Font size used in constructor
             <br />
             Read-only field.
             
             </summary>
             <returns>font size in <b>density independent points</b></returns>
            </member>
        <member name="P:NChart3D_Android.NChartFont.Style">
             <summary>
             May return style passed to constructor NChartFont or StyleNormal if NChartFont was used.
             <br />
             Read-only field.
             
             </summary>
             <returns>font style</returns>
            </member>
        <member name="T:NChart3D_Android.NChartFunnelSeries">
             <summary>
             The NChartFunnelSeries class provides methods to display funnel series.
             <p />
             This chart type has some specialties:
             <br /> - All axes are ignored, so it is reasonable to hide the axes by displaying funnel chart.
             <br /> - Only the first point from each series, all other points are ignored.
             <br /> - Only Y-value from the point is used, all the other values are ignored.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFunnelSeries.BottomRadius">
             <summary>
             Bottom radius of the series in interval [0, 1]. The default value is 0.5.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFunnelSeries.TopRadius">
             <summary>
             Top radius of the series in interval [0,1]. The default value is 0.5.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartFunnelSeriesSettings">
             <summary>
             The NChartFunnelSeriesSettings class provides global settings for Com.nulana.NChart.NChartFunnelSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFunnelSeriesSettings.GapSum">
             <summary>
             The sum of gaps between the points in the funnel chart in interval [0, 1]. The default value is 0.
             <p />
             <br /> Actual gap between the points is calculated as <code>gapSum / (countOfPoints - 1)</code> and 1
             corresponds to the height of the chart's plot area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFunnelSeriesSettings.Resolution">
             <summary>
             The resolution of funnel. Resolution is the amount of vertices that build the circle. For example if you want to
             get a square funnel, you should set resolution to 4. If you want to get a cylindrical funnel, you may set a larger
             value. But the larger is the resolution, the more memory is used and the slower the rendering will be, so you should
             find out the minimal acceptable value. A good value for funnel is 80 or 160.
             <br />
             The default value is 120.
             <br />
             <b>This value cannot be less than 3 and greater than 360.</b>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartFunnelSeriesSettings.ShouldSmooth">
             <summary>
             Flag that determines if funnel should appear smooth (true) of faced (false). Generally if you specify low resolution
             when the individual faces are still visible, it is a good idea to have funnel faced and vice versa.
             <br />
             The default value is false.
             <br />
             <b>If funnel are faced, it consumes more memory than if they don't by the same resolution.</b>
             
             See GetResolution
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartGradientBrush">
             <summary>
             The NChartGradientBrush class provides common methods for the brush that fills an area with some gradient.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartGradientBrushStop">
             <summary>
             The NChartGradientBrushStop class provides a control point of the gradient defining some color and it's position on the
             area being filled with a gradient. The gradient is constructed from multiple gradient-stops.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartGradientBrushStop.#ctor(System.Int32,System.Double)">
             <summary>
             Create gradient stop with color and offset.
             
             </summary>
             <param name="color">- the color of gradient stop.</param>
             <param name="offset">- the offset of gradient stop.</param>
            </member>
        <member name="P:NChart3D_Android.NChartGradientBrushStop.Color">
             <summary>
             Color of the gradient-stop.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartGradientBrushStop.Offset">
             <summary>
             Offset of gradient-stop in the whole gradient. Offset is in interval 0..1. 0 means the start of the area filled
             with a gradient, 1 means the end of it. For example if you want to create a gradient of two colors, it's common to
             use 0.0 as the offset for the first color and 1.0 for the second.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartHair">
             <summary>
             The NChartHair class provides methods to control the single line within crosshair.
             
             See NChartCrosshair
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.Draggable">
             <summary>
             Flag determining if hair can be dragged (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.FirstHalfColor">
             <summary>
             The color of the first half of hair. If <code>null</code>, not displayed. The default value is <code>null</code>.
             <p />
             The color of the hairs part from the axis to the point it marks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.HostsOnSAxis">
             <summary>
             Flag determining if hair is hosted on secondary axis (true) or not (false). The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.SecondHalfColor">
             <summary>
             The color of the second half of hair. If <code>null</code>, not displayed. The default value is <code>null</code>.
             <p />
             The color of the hairs part from the the point it marks to the end of chart plot area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.SnapToMajorTicks">
             <summary>
             Flag determining if hair should snap to major ticks while moving. The default value is NO.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.SnapToMinorTicks">
             <summary>
             Flag determining if hair should snap to minor ticks while moving. The default value is NO.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.Tooltip">
             <summary>
             Tooltip of the hair. The default value is null.
             To display tooltip you should set it before your <code>updateData</code> call.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.TooltipPosition">
             <summary>
             Position of the hair's tooltip. The default value is NChartCrosshairTooltipPosition.ByMax.
             For details see NChartCrosshairTooltipPosition.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.Value">
             <summary>
             Value the hair intersects its axis in. The default value is 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartHair.Visible">
             <summary>
             Flag determining if hair is visible (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartHair.SetColor(System.Int32)">
             <summary>
             Set color for both halves of hair.
             
             See NChartHair#getFirstHalfColor
             See NChartHair#getSecondHalfColor
             </summary>
             <param name="color">- color to set.</param>
            </member>
        <member name="T:NChart3D_Android.NChartHeatmapSeries">
             <summary>
             The NChartHeatmapSeries class provides methods to display heatmap series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartHeatmapSeriesSettings">
             <summary>
             The NChartHeatmapSeriesSettings class provides global settings for Com.nulana.NChart.NChartHeatmapSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartHighlightType">
             <summary>
             The HighlightType enum provides constants to highlight points. You may use them to build a bitmask of highlight.
             This means you may specify Color | Shift to get highlight by color and highlight
             by shift at the same time.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartHighlightType.Color">
             <summary>
             Highlight by color.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartHighlightType.Drop">
             <summary>
             Drop previous highlights. Add this to your highlight type combination if you do not want the highlights to
             accumulate. This means, if there are some highlights queued by delay or not fully animated, they will be
             cancelled.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartHighlightType.None">
             <summary>
             No highlight.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartHighlightType.Shift">
             <summary>
             Highlight by shift.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartInterpolator">
             <summary>
             The NChartInterpolator class provides base class for different interpolators that can be used to control animations.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLabel">
             <summary>
             The NChartLabel class provides methods to display text on the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.Font">
             <summary>
             Font of the label's text.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.MaxWidth">
             <summary>
             Maximal width of the label's text in pixels. If the text is bigger than the given size, lines will be broken
             according to the wrapping mode. If 0, this option is ignored. The default value is 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.Text">
             <summary>
             Text to display in the label.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.TextAlignment">
             <summary>
             Alignment of the label's text.
             
             See Android.graphics.Paint.Align
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.TextColor">
             <summary>
             Color of the label's text.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLabel.TextWrapping">
             <summary>
             Wrapping mode of the label's text.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLegend">
             <summary>
             The NChartLegend class provides methods to display the legend of the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.BlockAlignment">
             <summary>
             Alignment of the legend.
             <br />Please note, that if alignment is NChartLegendBlockAlignment.Left, NChartLegendBlockAlignment.Right,
             NChartLegendBlockAlignment.Bottom or NChartLegendBlockAlignment.Top, the border radius is
             ignored (assumed to be 0).
             
             See NChartLegendBlockAlignment
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.ColumnCount">
             <summary>
             Number of columns in legend. If 0 or less than 0, entries are aligned in lines with no columns.
             The default value is 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.ContentAlignment">
             <summary>
             Alignment of legend's content in legend's area. The default value is NChartLegendContentAlignment.Justified.
             
             See NChartLegendContentAlignment
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Delegate">
             <summary>
             Delegate of the legend.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Font">
             <summary>
             Font of the legend's text.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Footer">
             <summary>
             Label that is placed on the bottom of the legend. It's null by default.
             
             See NChartLabel
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Frame">
             <summary>
             Frame of the legend in the view's coordinate system.
             The frame is a rect fully enclosing the entire legend. This rect is calculated during <code>updateData</code>
             call when the chat lays out its elements. This rect may change interactively when the legend is dragged by its handler.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Header">
             <summary>
             Label that is placed on the top of the legend. It's null by default.
             
             See NChartLabel
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.LineBreakMode">
             <summary>
             Line break mode of the legend's text.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.MaxSize">
             <summary>
             Maximal size of legend in pixels. The default value is 200. If the legend's block alignment is so that the legend
             grows vertically, it is interpreted as maximal height, if the legend grows horizontally -- as maximal width.
             <br />To be more precise, the mapping works as follows
             <ul>
             <li> by NChartLegendBlockAlignment.BottomLeft it is height;</li>
             <li> by NChartLegendBlockAlignment.BottomCenter it is height;</li>
             <li> by NChartLegendBlockAlignment.BottomRight it is height;</li>
             <li> by NChartLegendBlockAlignment.CenterLeft it is width;</li>
             <li> by NChartLegendBlockAlignment.CenterCenter it is ignored;</li>
             <li> by NChartLegendBlockAlignment.CenterRight it is width;</li>
             <li> by NChartLegendBlockAlignment.TopLeft it is height;</li>
             <li> by NChartLegendBlockAlignment.TopCenter it is height;</li>
             <li> by NChartLegendBlockAlignment.TopRight it is height;</li>
             <li> by NChartLegendBlockAlignment.Left it is width;</li>
             <li> by NChartLegendBlockAlignment.Right it is width;</li>
             <li> by NChartLegendBlockAlignment.Bottom it is height;</li>
             <li> by NChartLegendBlockAlignment.Top it is height.</li>
             </ul>
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.MinimalEntriesPadding">
             <summary>
             Minimal padding between entries in pixels. The default value is 10.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Orientation">
             <summary>
             Orientation of the legend.
             
             See NChartLegendOrientation
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.Origin">
             <summary>
             Origin of the legend. It's a starting point that has effect only with orientation set to one of "free"-kinds.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.ScrollBarColor">
             <summary>
             Color of the legend's scrollbar.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.ScrollerPadding">
             <summary>
             Padding inside the scroller.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.ShouldAutodetectColumnCount">
             <summary>
             Flag determining if <code>columnCount</code> should be detected automatically to ensure good-looking legend (true) or not (false).
             If this property is true, the value set to <code>columnCount</code> takes no effect. The default value is false.
             
             See GetColumnCount
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegend.TextColor">
             <summary>
             Color of the legend's text.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLegend.HandlerNormalColor">
             <summary>
             Get color of legend's handler normal state.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLegend.HandlerPushedColor">
             <summary>
             Get color of legend's handler pushed state.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLegend.SetHandlerColors(System.Int32,System.Int32)">
             <summary>
             Set color for legend's handler.
             
             </summary>
             <param name="normal">- color for normal state.</param>
             <param name="pushed">- color for pushed state.</param>
            </member>
        <member name="M:NChart3D_Android.NChartLegend.SetHandlerImages(Android.Graphics.Bitmap,Android.Graphics.Bitmap)">
             <summary>
             Set images for legend's handler.
             
             </summary>
             <param name="normal">- image for normal state.</param>
             <param name="pushed">- image for pushed state.</param>
            </member>
        <member name="T:NChart3D_Android.NChartLegendBlockAlignment">
             <summary>
             The LegendBlockAlignment enum provides constants for different predefined positions of the legend on the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.Bottom">
             <summary>
             Legend fills the whole bottom area of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.BottomCenter">
             <summary>
             Legend is in the center on the bottom of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.BottomLeft">
             <summary>
             Legend is in the bottom left corner of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.BottomRight">
             <summary>
             Legend is in the bottom right corner of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.CenterCenter">
             <summary>
             Legend is in the center of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.CenterLeft">
             <summary>
             Legend is on the left in the middle of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.CenterRight">
             <summary>
             Legend is on the right in the middle of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.Left">
             <summary>
             Legend fills the whole left area of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.Right">
             <summary>
             Legend fills the whole right area of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.Top">
             <summary>
             Legend fills the whole top area of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.TopCenter">
             <summary>
             Legend is in the center on the top of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.TopLeft">
             <summary>
             Legend is in the top left corner of the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendBlockAlignment.TopRight">
             <summary>
             Legend is in the top right corner of the screen.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLegendContentAlignment">
             <summary>
             The LegendContentAlignment enum provides constants to align the legend's content in the legend area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendContentAlignment.Center">
             <summary>
             Align the content of the legend to the center.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendContentAlignment.Justified">
             <summary>
             Align the content of the legend justified.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendContentAlignment.Left">
             <summary>
             Align the content of the legend left.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLegendOrientation">
             <summary>
             The LegendOrientation enum provides constants for different legend docking modes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendOrientation.Fixed">
             <summary>
             Legend is fixed, you cannot alter the legend's origin, because it will be ignored.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendOrientation.FreeFloat">
             <summary>
             Legend is free by the X- and Y-Axis, so you can alter the origin.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendOrientation.FreeHorizontal">
             <summary>
             Legend is fixed by the Y-Axis, but free by the X-Axis, so you can alter the x-value of the origin and the y-value
             will be ignored.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLegendOrientation.FreeVertical">
             <summary>
             Legend is fixed by the X-Axis, but free by the Y-Axis, so you can alter the y-value of the origin and the x-value
             will be ignored.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLineAnimationType">
             <summary>
             The NChartLineAnimationType enum provides constants to control transition animation of line series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineAnimationType.GrowRight">
             <summary>
             Make lines grow from the left to the right.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineAnimationType.GrowUp">
             <summary>
             Make lines grow upwards.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLineBreakMode">
             <summary>
             The LineBreakMode enum provides constants to indicate behavior when a line is too long for its container.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.CharWrap">
             <summary>
             Wrapping occurs before the first character that does not fit.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.None">
             <summary>
             Line is not drawn past the edge of the text container.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.TruncateHead">
             <summary>
             The line is displayed so that it fits in the container and the missing text at the beginning of the line is replaced by an ellipsis glyph.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.TruncateMiddle">
             <summary>
             The line is displayed so that it fits in the container and the missing text in the middle is replaced by an ellipsis glyph.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.TruncateTail">
             <summary>
             The line is displayed so that it fits in the container and the missing text at the end of the line is replaced by an ellipsis glyph.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineBreakMode.WordWrap">
             <summary>
             Wrapping occurs before the first word that does not fit.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLineDash">
             <summary>
             The NChartLineDash class provides methods to set up the dash pattern for lines drawn on the chart.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLineDash.#ctor(System.Single[],System.Single)">
             <summary>
             Init line dash instance.
             
             </summary>
             <param name="pattern">- pattern of the line dash.</param>
             <param name="phase">- phase of the line dash.</param>
            </member>
        <member name="M:NChart3D_Android.NChartLineDash.#ctor(System.Single[])">
             <summary>
             Init line dash instance.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLineDash.#ctor">
             <summary>
             Init line dash instance.
             
             </summary>
             <param name="pattern">- pattern of the line dash.</param>
            </member>
        <member name="P:NChart3D_Android.NChartLineDash.Phase">
             <summary>
             Value specifying how far (in pixels) into the dash pattern the line starts.
             The default value is 0 which means to start interpreting the pattern from the beginning.<br />
             For example, if 10 is set, the line is drawn with the dash pattern starting at 10 pixels from its
             beginning.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLineDash.GetPattern">
             <summary>
             Array representing the line dash as the lengths (in pixels) of the painted and unpainted segments, respectively.
             If the values is null or an array has no elements, dash is not applied and the line is drawn continuous.
             The default values is null.<br />
             For example, if the array <code>[10, 15]</code> is set, the line will alternate between 10 pixels
             drawn segment and 15 pixels gap. If <code>[10, 5, 15, 8]</code> is set, the line will be a looped pattern
             of 10 pixels drawn segment, followed by 5 pixels gap, followed by 15 pixels drawn segment, followed by 8 pixels gap.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLineDash.SetPattern(System.Single[])">
             <summary>
             For details see GetPattern
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLineSeries">
             <summary>
             The NChartLineSeries class provides methods to display line series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineSeries.LineDash">
             <summary>
             Dash of the line.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineSeries.LineThickness">
             <summary>
             Thickness of the line in pixels. The default value is 2.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineSeries.Marker">
             <summary>
             Marker that is shown on the points. This is null by default (no marker is displayed).
             
             See NChartMarker
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineSeries.NoDataColor">
             <summary>
             Color of the line in the points with no data.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLineSeriesSettings">
             <summary>
             The NChartLineSeriesSettings class provides global settings for Com.nulana.NChart.NChartLineSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartLineSeriesSettings.AnimationType">
             <summary>
             Animation type of the transition. The default value is <code>NChartTypes.LineAnimationType.GrowUp</code>.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartLinearGradientBrush">
             <summary>
             The NChartLinearGradientBrush class provides a brush that fills the area with a linear gradient.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartLinearGradientBrush.#ctor(System.Int32,System.Int32)">
             <summary>
             Create linear gradient brush with given colors. This is a convenient equivalent to creating stops, arraying them and
             then setting the array to the new instance of the linear gradient brush.
             
             </summary>
             <param name="color1">- first color of gradient.</param>
             <param name="color2">- second color of gradient.</param>
            </member>
        <member name="T:NChart3D_Android.NChartLinearInterpolator">
             <summary>
             The NChartLinearInterpolator class provides linear interpolator. If it is used, the animated values will changed in
             time as follows: v(t) = (1 - t) * v_from + t * v_to, where v_from, v_to are respectively the start and end values,
             t is the time.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartMargin">
             <summary>
             The Margin class stores the spacing of chart's elements.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMargin.Bottom">
             <summary>
             Spacing from the bottom side in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMargin.Left">
             <summary>
             Spacing from the left side in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMargin.Right">
             <summary>
             Spacing from the right side in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMargin.Top">
             <summary>
             Spacing from the top side in pixels.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartMargin.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Create Margin with given parameters.
             
             </summary>
             <param name="left">- spacing from the left side in pixels.</param>
             <param name="right">- spacing from the right side in pixels.</param>
             <param name="bottom">- spacing from the bottom side in pixels.</param>
             <param name="top">- spacing from the top side in pixels.</param>
            </member>
        <member name="T:NChart3D_Android.NChartMarker">
             <summary>
             The NChartMarker class provides methods to display markers in the points of the chart.
             <br />
             Each series, that can display markers, has the property default marker. If you set it to series, this will be a
             default for all the points. However you can set the marker for the point and those values, that you set to this
             marker, will override the corresponding values from the default marker. For example, if you set the marker for series
             and change its size, shape and resolution, and after that set another marker to some point and change its size, all
             points will have the markers with shape and resolution from the default marker. The size of all points except the one
             you modified will also be the same (obtained from default marker too). And the modified point will differ in size.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.AngleX">
             <summary>
             Rotation of the marker around the X-axis in radians. This property is used for "volumetric" markers only,
             this means for those that are not plain.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.AngleY">
             <summary>
             Rotation of the marker around the Y-axis in radians. This property is used for "volumetric" markers only,
             this means for those that are not plain.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.AngleZ">
             <summary>
             Rotation of the marker around the Z-axis in radians. This property is used for "volumetric" markers only,
             this means for those that are not plain.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.BorderBrush">
             <summary>
             Brush of the marker's border. Please note, that only markers with predefined shapes have borders. If you use model,
             border's properties are ignored.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.BorderThickness">
             <summary>
             Thickness of the marker's border in pixels. Please note, that only markers with predefined shapes have borders.
             If you use a model, the border's properties are ignored.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.Brush">
             <summary>
             Brush that fills the marker.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.Model">
             <summary>
             Model of the marker. This property is null by default. By setting this property, shape is automatically set to
             NChartMarkerShape. If the shape is not NChartMarkerShape, this property has no
             effect, even if it is not null. If the shape is NChartMarkerShape and model is null, it is equivalent
             to the shape set to NChartMarkerShape.None, so no marker is displayed.
             
             See NChartModel
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.Resolution">
             <summary>
             Resolution of the marker. Resolution is the amount of vertices that build the circle (sphere). It is used if marker's
             shape is NChartMarkerShape.Circle or NChartMarkerShape.Sphere.
             <br />
             This value cannot be less than 3 and greater than 32.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.SelectionSize">
             <summary>
             Size of the marker's touch area (the area you can touch to select the corresponding chart point).
             If this size is zero, touch area has the size of marker (that is set with SetSize).
             The default value is 0.0f.
             Use this property if you want to make touch area more or less then the marker size.
             The size can be in any unit you want. It is rescaled to pixels with the help of NChartSizeAxis.
             If no data source is set for size axis, units are interpreted as pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.Shape">
             <summary>
             Shape of the marker. There are predefined shapes and NChartMarkerShape that requires the model to
             be set.
             
             See NChartMarkerShape
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarker.Size">
             <summary>
             Size of the marker.
             The size can be in any unit you want. It is rescaled to pixels with the help of NChartSizeAxis.
             If no data source is set for size axis, units are interpreted as pixels.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartMarkerShape">
             <summary>
             The MarkerShape enum provides constants for markers' shapes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarkerShape.Circle">
             <summary>
             Display a plain circle.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarkerShape.Model">
             <summary>
             Display a custom 3D model.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarkerShape.None">
             <summary>
             Do not display the marker.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartMarkerShape.Sphere">
             <summary>
             Display a volumetric sphere.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartModel">
             <summary>
             The NChartModel provides the container for the 3D model that can be loaded from file and then be displayed as a marker
             (see NChartMarker for details).
             PLY (<a href="http://en.wikipedia.org/wiki/PLY_%28file_format%29">http://en.wikipedia.org/wiki/PLY_(file_format)</a>) with triangles and geometry of 3DS
             (<a href="http://en.wikipedia.org/wiki/.3ds">http://en.wikipedia.org/wiki/.3ds</a>) are supported.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartModel.#ctor(System.Byte[])">
             <summary>
             Create model with data.
             
             </summary>
             <param name="data">- data containing the model.</param>
            </member>
        <member name="M:NChart3D_Android.NChartModel.#ctor(System.String)">
             <summary>
             Create model with contents of file.
             
             </summary>
             <param name="filePath">- path to file containing the model.</param>
            </member>
        <member name="P:NChart3D_Android.NChartModel.TrianglesCount">
             <summary>
             Number of triangles in the model.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartModel.VertexCount">
             <summary>
             Number of vertices in the model.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartOHLCSeries">
             <summary>
             The NChartOHLCSeries class provides methods to display OHLC series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartOHLCSeries.NegativeColor">
             <summary>
             Color for negative candles.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartOHLCSeries.PositiveColor">
             <summary>
             Color for positive candles.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartOHLCSeriesSettings">
             <summary>
             The NChartOHLCSeriesSettings class provides global settings for Com.nulana.NChart.NChartOHLCSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartOLSTrendDetector">
             <summary>
             The NChartOLSTrendDetector class provides methods to create linear trend based on ordinary least squares (OLS).
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartObject">
             <summary>
             The NChartObject class provides common methods for all the objects on the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartObject.Chart">
             <summary>
             Chart the object belongs to.
             This property is assigned automatically whenever the object is assigned to the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartObject.Visible">
             <summary>
             Flag that determines if the object is visible or not. The default value is "true".
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartPeakDetector">
             <summary>
             The NChartPeakDetector class provides methods to detect peak values inside the given point array. The detection is
             based on the deviation from moving average.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPeakDetector.AbsoluteThreshold">
             <summary>
             Flag determining if GetThreshold is absolute (true) or relative (false). The default value is false.
             Absolute threshold means that it is given in the same units as the values in the analyzed points.
             Relative threshold represents a fraction of |max - min|, where max is the maximal value in the given points array and
             min is the minimal one.
             So if, for example, min = 0, max = 10, threshold is set to 0.3 and this flag is true, then the actual threshold the
             peaks will be search according to will be 0.3.
             But if this flag is false, the actual threshold will be 0.3 * (10 - 0) = 3.
             Normally it's reasonable to use relative threshold if you don't know the bounds of your values. However, this will
             mean an additional scan through the points to determine min and max values, so the processing will take a bit more
             time.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPeakDetector.FindMax">
             <summary>
             Flag determining if peak detector should find up-peaks (true), or not (false). The default value is true. The up-peaks
             are defined as peaks laying below the moving average inside the search window.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPeakDetector.FindMin">
             <summary>
             Flag determining if peak detector should find down-peaks (true), or not (false). The default value is true. The down-peaks
             are defined as peaks laying beneath the moving average inside the search window.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPeakDetector.Threshold">
             <summary>
             Threshold to search the peaks according to. The default value is 0.3. See IsAbsoluteThreshold for details about how
             this value is interpreted.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPeakDetector.WindowWidth">
             <summary>
             Width (in number of points) of the search window needed to calculate moving average. The default value is 5.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartPieSeries">
             <summary>
             The NChartPieSeries class provides methods to display pie series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPieSeries.BevelColor">
             <summary>
             Color of the bevel effect. This property is supported in 2D mode only. The default value is null (that means no bevel).
             Use this property to add a bevel effect to the series. You can achieve different effects with different
             colors. For example, to add a shadow inside the pie circle, set the color like
             <code>Color.argb(60, 0, 0, 0)</code>.
             You also have to set NChartPieSeriesSettings.SetBevelRatio to get the bevel effect.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartPieSeriesSettings">
             <summary>
             The NChartPieSeriesSettings class provides global settings for Com.nulana.NChart.NChartPieSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPieSeriesSettings.BevelRatio">
             <summary>
             Bevel effect ratio that determines size of the bevel for pie series relatively to the whole pie radius.
             This property is supported in 2D mode only. The default value is 0.0 (that means no bevel).
             <p />
             <b>Note</b>: This value cannot be less than 0.0 and greater than 1.0.
             You also have to set NChartPieSeries.SetBevelColor to get the bevel effect.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPieSeriesSettings.CenterCaption">
             <summary>
             Caption that appears in the center of pie.
             
             See Com.nulana.NChart.NChartTooltip
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPieSeriesSettings.HoleRatio">
             <summary>
             Hole radius ratio that determines size of the hole for pie series relatively to the whole pie radius. The default
             value 0.1.
             <p />
             <b>Note</b>: This value cannot be less than 0 and greater than 1.0.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartPlaced">
             <summary>
             The NChartPlaced class provides basic methods for objects displaying some textual information on the screen.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.Background">
             <summary>
             Brush filling the background of the text container.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.BorderColor">
             <summary>
             Color of the border that is drawn around the text container.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.BorderRadius">
             <summary>
             Corner rounding radius (in pixels) of the border that is drawn around the text container.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.BorderThickness">
             <summary>
             Thickness of the border (in pixels) that is drawn around the text container.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.Margin">
             <summary>
             Margin of the text container in pixels (spacing from the bounds of the enclosing area).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.Opacity">
             <summary>
             Opacity of the text container. Value should be in 0..1. The default value is 1.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPlaced.Padding">
             <summary>
             Padding of the text container in pixels (spacing to sub-areas).
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartPoint">
             <summary>
             The NChartPoint class provides methods to manage chart's points.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.Tag">
             <summary>
             Tag of the point. You may use it as you want.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartPoint.#ctor">
             <summary>
             Create point with an array of states.
             
             See NChartSeries
             </summary>
             <param name="states">- the array of point states. See NChartPointState for details.</param>
             <param name="series">- the series the point belongs to.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPoint.#ctor(NChart3D_Android.NChartPointState,NChart3D_Android.NChartSeries)">
             <summary>
             Create point with a single state.
             
             See NChartSeries
             </summary>
             <param name="state">- the state if point. See NChartPointState for details.</param>
             <param name="series">- the series the point belongs to.</param>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.CurrentState">
             <summary>
             Direct access to current state. This is a bit faster and more convenient than a query element of the states' array by
             GetCurrentStateIndex. If a point was created with a single state, this property is the only way to access it.
             
             See NChartPointState
             </summary>
             <returns>current state.</returns>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.CurrentStateIndex">
             <summary>
             If a point was created with a single state, this property always returns 0.
             
             </summary>
             <returns>index of current state.</returns>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.HighlightColor">
             <summary>
             Highlight color. Some points can be highlighted by color, for example in column, pie or bubble
             (where the points are individual objects). In series like line and area the color highlight can be applied to the
             markers, so for these series this property has effect only if the marker is set.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.HighlightShift">
             <summary>
             Highlight shift. Some points can be highlighted by shift, for example in pie. The shift is set in scene units.
             For example, the radius of pie is 1 scene unit, so you can use this value as a reference.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.Label">
             <summary>
             It is null by default. The label does not change its content automatically.
             By altering its text, you can display any information you want, but you should do it yourself.
             Label is similar to <code>tooltip</code>, but it is placed in the top of the point by default.
             You can have <code>tooltip</code> and <code>label</code> simultaneously displaying different information.
             
             See NChartTooltip
             See SetTooltip
             </summary>
             <returns>label that is shown near the point.</returns>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.Series">
             <summary>
             See NChartSeries
             </summary>
             <returns>Series the point belongs to.</returns>
            </member>
        <member name="P:NChart3D_Android.NChartPoint.Tooltip">
             <summary>
             The tooltip is just a label, it does not change its content automatically.
             By altering its text, you can display any information you want, but you should do it yourself.
             <br />Tooltip is similar to <code>label</code>, but it is placed in the center of the point by default.
             You can have <code>tooltip</code> and <code>label</code> simultaneously displaying different information.
             
             See NChartTooltip
             See SetLabel
             </summary>
             <returns>tooltip that is shown on the point. It is null by default.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPoint.GetStates">
             <summary>
             If a point was created with a single state, the array of states
             is not allocated and this property returns null.
             
             See NChartPointState
             </summary>
             <returns>array of states.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPoint.Highlight(System.Int32,System.Single,System.Single)">
             <summary>
             Highlight point using the highlight settings done by <code>highlightColor</code> and <code>highlightShift</code> properties.
             
             See NChartHighlightType
             See SetHighlightColor
             See SetHighlightShift
             </summary>
             <param name="mask">- mask of highlighting. See NChartHighlightType enum for details. You may use multiple constantsconcatenated with bitwise OR.</param>
             <param name="duration">- duration of highlighting animation in seconds.</param>
             <param name="delay">- delay to start of highlighting animation in seconds.</param>
            </member>
        <member name="T:NChart3D_Android.NChartPointAnalyzer">
             <summary>
             The NChartPointAnalyzer provides basic methods to scan the given array of chart points and perform some analytics.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartPointAnalyzer.#ctor">
             <summary>
             Create instance of point analyzer.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointAnalyzer.StepDimension">
             <summary>
             Key of the value that should be interpreted as step dimension. Typically it is NChartValue.X (which is the default
             value), however for bar series it should be NChartValue.Y.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointAnalyzer.ValueDimension">
             <summary>
             Key of the value that should be interpreted as height dimension. Typically it is NChartValue.Y (which is the default
             value), however for bar series it should be NChartValue.X.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartPointAnalyzer.AnalyzePoints(NChart3D_Android.NChartPoint[])">
             <summary>
             Perform the analytics on an array of points. This method is implemented in subclasses. It takes into account all the
             states inside the points given.
             
             </summary>
             <param name="points">- array of points to analyze.</param>
             <returns>array of result points. Note, that these points can be obtained from the array given, but also generated anew,or both according to the logic of particular point analyzer.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPointAnalyzer.AnalyzePoints(NChart3D_Android.NChartPoint[],System.Int32)">
             <summary>
             Perform the analytics on an array of points. This method is implemented in subclasses. It takes into account the
             point states with given index only.
             
             </summary>
             <param name="points">- array of points to analyze.</param>
             <param name="stateIndex">- index of point state to take into account.</param>
             <returns>array of result points. Note, that these points can be obtained from the array given, but also generated anew,or both according to the logic of particular point analyzer.</returns>
            </member>
        <member name="T:NChart3D_Android.NChartPointState">
             <summary>
             The NChartPointState class provides methods to store state of a point. The state of a point is a complex of parameters
             such as position, brush used etc. for a particular period for a particular point. Each chart point should have at
             least one state representing the data from the data source for this point, but it can have multiple states. This
             allows the animation of a chart through time, while each NChartPointState represents the state of the point in a
             particular time tick. The transition from one state to another is animated automatically by linear interpolation of
             parameters stored in the states.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.BorderBrush">
             <summary>
             Brush of the point's border.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Brush">
             <summary>
             Brush that fills the point.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Circle">
             <summary>
             Circle of a point state.
             
             See PointStateWithCircleValue
             See PointStateWithCircleValueHeight
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Close">
             <summary>
             Close value of a point state.
             
             See PointStateAlignedToXWithXLowOpenCloseHigh
             See PointStateAlignedToXZWithXZLowOpenCloseHigh
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DateX">
             <summary>
             Date X value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DateY">
             <summary>
             Date Y value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DateZ">
             <summary>
             Date Z value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DoubleX">
             <summary>
             Double X value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DoubleY">
             <summary>
             Double Y value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.DoubleZ">
             <summary>
             Double Z value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Height">
             <summary>
             Height of a point state.
             
             See PointStateWithCircleValue
             See PointStateWithCircleValueHeight
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.High">
             <summary>
             High value of a point state.
             
             See PointStateAlignedToXWithXLowOpenCloseHigh
             See PointStateAlignedToXZWithXZLowOpenCloseHigh
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.IntX">
             <summary>
             Integer X value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.IntY">
             <summary>
             Integer Y value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.IntZ">
             <summary>
             Integer Z value of a point state.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Low">
             <summary>
             Low value of a point state.
             
             See PointStateAlignedToXWithXLowOpenCloseHigh
             See PointStateAlignedToXZWithXZLowOpenCloseHigh
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Marker">
             <summary>
             Marker of the point.
             
             See NChartMarker
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Open">
             <summary>
             Open value of a point state.
             
             See PointStateAlignedToXWithXLowOpenCloseHigh
             See PointStateAlignedToXZWithXZLowOpenCloseHigh
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPointState.Value">
             <summary>
             Value of a point state.
             
             See PointStateWithCircleValue
             See PointStateWithCircleValueHeight
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXLowHigh(System.Int32,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the X grid and has low and high values. This is the a typical
             state for a band series drawn in 2D.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXLowHigh(Java.Util.Date,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the X grid and has low and high values. This is the a typical
             state for a band series drawn in 2D.
             
             </summary>
             <param name="x">- date value on the X axis that represents the category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXLowOpenCloseHigh(System.Int32,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the X grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 2D.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the  Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXLowOpenCloseHigh(Java.Util.Date,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the X grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 2D.
             
             </summary>
             <param name="x">- date value on the X axis that represents the category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the  Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXY(System.Int32,System.Double)">
             <summary>
             Create a point state representing the point that is aligned to the X grid. This is a typical state for column, area,
             line and ribbon series if drawn in 2D.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXWithXY(Java.Util.Date,System.Double)">
             <summary>
             Create a point state representing the point that is aligned to the X date grid. This is a typical state for column, area,
             line and ribbon series if drawn in 2D.
             
             </summary>
             <param name="x">- date value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
             <returns>a new instance of the point state.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXYZ(System.Int32,System.Double,System.Int32)">
             <summary>
             Create a point state representing the point that is aligned to the XZ grid. This is a typical state for column,
             area, line and ribbon series if drawn in 3D. This can also be used for a surface.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
             <param name="z">- integer value on the Z axis that represents the second category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXYZ(System.Int32,System.Double,Java.Util.Date)">
             <summary>
             Create a point state representing the point that is aligned to the XZ date grid. This is a typical state for column,
             area, line and ribbon series if drawn in 3D. This can also be used for a surface.
             
             </summary>
             <param name="x">- date value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
             <param name="z">- date value on the Z axis that represents the second category.</param>
             <returns>a new instance of the point state.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXYZ(Java.Util.Date,System.Double,System.Int32)">
             <summary>
             Create a point state representing the point that is aligned to the X date grid and Z grid. This is a typical state for column,
             area, line and ribbon series if drawn in 3D. This can also be used for a surface.
             
             </summary>
             <param name="x">- date value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
             <param name="z">- integer value on the Z axis that represents the second category.</param>
             <returns>a new instance of the point state.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXYZ(Java.Util.Date,System.Double,Java.Util.Date)">
             <summary>
             Create a point state representing the point that is aligned to the X grid and Z date grid. This is a typical state for column,
             area, line and ribbon series if drawn in 3D. This can also be used for a surface.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the first category.</param>
             <param name="y">- double value on the Y axis that represents the height value.</param>
             <param name="z">- date value on the Z axis that represents the second category.</param>
             <returns>a new instance of the point state.</returns>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXZLowOpenCloseHigh(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the XZ grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 3D.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the first category.</param>
             <param name="z">- integer value on the Z axis that represents the second category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXZLowOpenCloseHigh(System.Int32,Java.Util.Date,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the XZ grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 3D.
             
             </summary>
             <param name="x">- date value on the X axis that represents the first category.</param>
             <param name="z">- date value on the Z axis that represents the second category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXZLowOpenCloseHigh(Java.Util.Date,System.Int32,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the XZ grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 3D.
             
             </summary>
             <param name="x">- date value on the X axis that represents the first category.</param>
             <param name="z">- integer value on the Z axis that represents the second category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToXZWithXZLowOpenCloseHigh(Java.Util.Date,Java.Util.Date,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the XZ grid and has low, open, close and high values. This is a typical
             state for candlestick series drawn in 3D.
             
             </summary>
             <param name="x">- integer value on the X axis that represents the first category.</param>
             <param name="z">- date value on the Z axis that represents the second category.</param>
             <param name="low">- double value on the Y axis that represents the "low" value.</param>
             <param name="open">- double value on the Y axis that represents the "open" value.</param>
             <param name="close">- double value on the Y axis that represents the "close" value.</param>
             <param name="high">- double value on the Y axis that represents the "high" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYWithXY(System.Double,System.Int32)">
             <summary>
             Create a point state representing the point that is aligned to the Y grid. This is a typical state for bar series
             if drawn in 2D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- integer value on Y axis that represents the first category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYWithXY(System.Double,Java.Util.Date)">
             <summary>
             Create a point state representing the point that is aligned to the Y grid. This is a typical state for bar series
             if drawn in 2D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- date value on Y axis that represents the first category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYWithYOpenClose(System.Int32,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the Y grid and has open and close values. This is the a typical
             state for a sequence series drawn in 2D.
             
             </summary>
             <param name="y">- integer value on the Y axis that represents the category.</param>
             <param name="open">- double value on the X axis that represents the "open" value.</param>
             <param name="close">- double value on the X axis that represents the "close" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYWithYOpenClose(Java.Util.Date,System.Double,System.Double)">
             <summary>
             Create a point state that is aligned to the Y grid and has open and close values. This is the a typical
             state for a sequence series drawn in 2D.
             
             </summary>
             <param name="y">- date value on the Y axis that represents the category.</param>
             <param name="open">- double value on the X axis that represents the "open" value.</param>
             <param name="close">- double value on the X axis that represents the "close" value.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYZWithXYZ(System.Double,System.Int32,System.Int32)">
             <summary>
             Create a point state representing the point that is aligned to the YZ grid. This is a typical state for bar series
             if drawn in 3D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- integer value on Y axis that represents the first category.</param>
             <param name="z">- integer value on Z axis that represents the second category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYZWithXYZ(System.Double,System.Int32,Java.Util.Date)">
             <summary>
             Create a point state representing the point that is aligned to the YZ grid. This is a typical state for bar series
             if drawn in 3D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- date value on Y axis that represents the first category.</param>
             <param name="z">- date value on Z axis that represents the second category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYZWithXYZ(System.Double,Java.Util.Date,System.Int32)">
             <summary>
             Create a point state representing the point that is aligned to the YZ grid. This is a typical state for bar series
             if drawn in 3D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- date value on Y axis that represents the first category.</param>
             <param name="z">- integer value on Z axis that represents the second category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateAlignedToYZWithXYZ(System.Double,Java.Util.Date,Java.Util.Date)">
             <summary>
             Create a point state representing the point that is aligned to the YZ grid. This is a typical state for bar series
             if drawn in 3D.
             
             </summary>
             <param name="x">- double value on X axis that represents the height value.</param>
             <param name="y">- integer value on Y axis that represents the first category.</param>
             <param name="z">- date value on Z axis that represents the second category.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateWithCircleValue(System.Int32,System.Double)">
             <summary>
             Create a point state representing the point that is aligned to the concentric circles. This is a typical state for
             pie series if drawn in 2D.
             
             </summary>
             <param name="circle">- number of circle among concentric circles that represents the category.</param>
             <param name="value">- value of the state that affects the angle of the sector. The angle will represent the percent of thevalue among all values in the circle this state belongs to.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateWithCircleValueHeight(System.Int32,System.Double,System.Double)">
             <summary>
             Create a point state representing the point that is aligned to the concentric circles and has the height. This is a
             typical state for pie series if drawn in 3D.
             
             </summary>
             <param name="circle">- number of circle among concentric circles that represents the category.</param>
             <param name="value">- value of the state that affects the angle of the sector. The angle will represent the percent of thevalue among all values in the circle this state belongs to.</param>
             <param name="height">- height of sector. The height should be in interval 0..1. It is not connected to any axis, so thevalue is not mapped. You may use it to visually group sectors or to stress some of them.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateWithXYValue(System.Double,System.Double,System.Double)">
             <summary>
             Create free (not aligned) 2D-space point state with value. This is a typical state for heatmap series.
             
             </summary>
             <param name="x">- double value on the X axis that represents the abscissa of a position.</param>
             <param name="y">- double value on the Y axis that represents the ordinate of a position.</param>
             <param name="value">- value of the state that represents the amount of entity displayed by series.</param>
            </member>
        <member name="M:NChart3D_Android.NChartPointState.PointStateWithXYZ(System.Double,System.Double,System.Double)">
             <summary>
             Create free (not aligned) 3D-space point. This is a typical state for bubble or surface series. But you may use
             this for other series types too.
             
             </summary>
             <param name="x">- double value on the X axis that represents the abscissa of a position.</param>
             <param name="y">- double value on the Y axis that represents the ordinate of a position.</param>
             <param name="z">- double value on the Z axis that represents the applicate of a position.</param>
            </member>
        <member name="T:NChart3D_Android.NChartPolarSystem">
             <summary>
             The NChartPolarSystem class provides methods for managing the chart's polar coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.AzimuthAxis">
             <summary>
             Azimuth-Axis of the polar coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.BorderColor">
             <summary>
             Color of the border around the polar coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.BorderThickness">
             <summary>
             Thickness of the border around the polar coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.BorderVisible">
             <summary>
             Flag that determines if the border around the polar coordinate system is visible (true) or not (false).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.Grid">
             <summary>
             Grid of the polar coordinate system.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartPolarSystem.RadiusAxis">
             <summary>
             Radius-Axis of the polar coordinate system.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartRadarSeries">
             <summary>
             The NChartRadarSeries class provides methods to display radar series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartRadarSeriesSettings">
             <summary>
             The NChartRadarSeriesSettings class provides global settings for Com.nulana.NChart.NChartRadarSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartRadarSeriesSettings.ShouldSmoothAxesGrid">
             <summary>
             Flag determining if axes grid should be smoothed, so it should appear as a circle, not as polygon (true) or not (false).
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartRibbonSeries">
             <summary>
             The NChartRibbonSeries class provides methods to display ribbon series. This series type is for 3D only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartRibbonSeries.Marker">
             <summary>
             Marker that is shown on the points. This is null by default (no marker is displayed).
             
             See NChartMarker
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartRibbonSeries.NoDataColor">
             <summary>
             Color of the ribbon in the points with no data.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartRibbonSeriesSettings">
             <summary>
             The NChartRibbonSeriesSettings class provides global settings for Com.nulana.NChart.NChartRibbonSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartScaleLegend">
             <summary>
             The NChartScaleLegend class provides methods to display the legend associated with the NChartBrushScale instance.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartScaleLegend.#ctor(NChart3D_Android.NChartBrushScale)">
             <summary>
             Create scale legend with given brush scale.
             
             </summary>
             <param name="scale">- brush scale for the scale legend.</param>
            </member>
        <member name="P:NChart3D_Android.NChartScaleLegend.ScaleDelegate">
             <summary>
             Delegate of the scale legend.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSequenceSeries">
             <summary>
             The NChartSequenceSeries class provides methods to display sequence series. This series type is for 2D only.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSequenceSeriesSettings">
             <summary>
             The NChartSequenceSeriesSettings class provides global settings for Com.nulana.NChart.NChartSequenceSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSeries">
             <summary>
             The NChartSeries class provides common methods for the series of the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.Tag">
             <summary>
             Tag of the series. You may use it as you want.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.DataSmoother">
             <summary>
             Data smoother used. The default value is null (no data smoother used).
             
             See NChartDataSmoother
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.DataSource">
             <summary>
             Data source for the series.
             
             See NChartSeriesDataSource
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.HostsOnSX">
             <summary>
             Flag that determines if the series is hosted on the secondary X-axis. If true, it will be drawn according to the
             secondary X-axis, if false according to the normal X-axis. The secondary axis appears opposite the normal axis and is
             managed separately: it can have its own min and max; its own color settings and so on.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.HostsOnSY">
             <summary>
             Flag that determines if the series is hosted on the secondary Y-axis. If true, it will be drawn according to the
             secondary Y-axis, if false according to the normal Y-axis. The secondary axis appears opposite the normal axis and is
             managed separately: it can have its own min and max; its own color settings and so on.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.HostsOnSZ">
             <summary>
             Flag that determines if the series is hosted on the secondary Z-axis. If true, it will be drawn according to the
             secondary Z-axis, if false according to the normal Z-axis. The secondary axis appears opposite the normal axis and is
             managed separately: can have its own min and max; its own color settings and so on.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.Image">
             <summary>
             Image that is displayed in the legend. This property returns the image only if it was provided by the data source.
             If the default image is used, null is returned.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.LegendMarkerSize">
             <summary>
             Size of default series' marker in legend in pixels. The default value is 20.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.Name">
             <summary>
             Name of the series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeries.Scale">
             <summary>
             Brush scale of the series used to color the map.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartSeries.Points">
             <summary>
             Array of points.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSeriesSettings">
             <summary>
             The NChartSeries.Settings class provides basic container for settings that are to be applied for all the series of
             particular type that are added to the chart. For different types of series there are different classes of containers
             that are inherited from NChartSeries.Settings.
             <br />You can add the settings to the chart via Com.nulana.NChart.NChart.AddSeriesSettings method.
             <br />The settings are applied to the series while Com.nulana.NChart.NChart.UpdateData.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartSeriesSettings.#ctor">
             <summary>
             Create instance of settings.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSeriesSettings.RudimentEnabled">
             <summary>
             Flag determining if rudiment is allowed. The default value is true.
             <p />
             Rudiment is a part of series that remains unused from the previous displayed data set and disappears
             by the animated transition.
             
             </summary>
             <returns>true if rudiment is enabled, false if not.</returns>
            </member>
        <member name="T:NChart3D_Android.NChartShadingModel">
             <summary>
             The ShadingModel provides constants for shading models used to shade 3D-objects.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartShadingModel.Phong">
             <summary>
             Phong's shading model, filling with the corresponding color / gradient / texture / etc while shaded.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartShadingModel.Plain">
             <summary>
             Plain shading model, just filling with the corresponding color / gradient / texture / etc.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSizeAxis">
             <summary>
             The NChartSizeAxis class provides methods to scale the sizes of NChartMarker objects. The idea is to map the value
             of marker's size that is assumed to be in (GetMinValue, GetMaxValue) to the (GetMinSize, GetMaxSize). For example if a
             particular marker has size 0.3555, <code>minValue = 0</code>, <code>maxValue = 1</code>, <code>minSize = 10</code> (pixels) and <code>maxSize = 100</code> (pixels),
             the actual size of the marker on the screen will be 42 pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.DataSource">
             <summary>
             Data source of the axis
             
             See NChartSizeAxisDataSource
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.MaxSize">
             <summary>
             Maximal size of the markers on the screen in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.MaxValue">
             <summary>
             Maximal value of the markers' sizes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.MinSize">
             <summary>
             Minimal size of the markers on the screen in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.MinValue">
             <summary>
             Minimal value of the markers' sizes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSizeAxis.ShouldIgnoreZoom">
             <summary>
             Flag determining if markers should ignore chart's zoom (true) or not (false). The default value is false.
             If this flag is set to true, markers are not zoomed with the chart and remain in their size
             (value of their <code>size</code> property).
             Otherwise, size of markers corresponds to their <code>size</code> property when zoom is 1.0 only.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSolidColorBrush">
             <summary>
             The NChartSolidColorBrush class provides the brush that fills the area with a solid color
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartSolidColorBrush.#ctor">
             <summary>
             Create brush with color.
             
             </summary>
             <param name="color">- color for the brush.</param>
            </member>
        <member name="P:NChart3D_Android.NChartSolidColorBrush.Color">
             <summary>
             Color of the brush.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSolidSeries">
             <summary>
             The NChartSolidSeries class provides common methods to display series that are filled with some brush and have a border.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSolidSeries.BorderBrush">
             <summary>
             Brush of the border that surrounds the series.
             
             See NChartBrush
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSolidSeries.BorderThickness">
             <summary>
             Thickness (in pixels) of the border that surrounds the series.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSolidSeries.Brush">
             <summary>
             Brush that fills the series.
             
             See NChartBrush
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSolidSeriesSettings">
             <summary>
             The NChartSolidSeriesSettings class provides common settings for Com.nulana.NChart.NChartSolidSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartSolidSeriesSettings.FillRatio">
             <summary>
             Fill ratio for series that determines the amount of place for one series. For example, if the fill ratio is 1.0 and
             the column series is displayed, one column (or one group of columns, if there are many series on one chart
             at the same time) fills the whole area of one tick on the X and Z axes (for bar series -- on the Y and Z
             respectively, for area -- it's Z-width and so on). If the fill ratio is 0.5, the column fills half the area of one
             tick and so on. The default value is 0.7.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartStepSeries">
             <summary>
             The NChartStepSeries class provides methods to display step series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartStepSeriesSettings">
             <summary>
             The NChartStepSeriesSettings class provides global settings for Com.nulana.NChart.NChartStepSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSurfaceSeries">
             <summary>
             The NChartSurfaceSeries class provides methods to display surface series.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartSurfaceSeriesSettings">
             <summary>
             The NChartSurfaceSeriesSettings class provides global settings for Com.nulana.NChart.NChartSurfaceSeries.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTextureBrush">
             <summary>
             The NChartTextureBrush class provides the brush that fills the area with a texture (aka image).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTextureBrush.#ctor(Android.Graphics.Bitmap,System.Int32,NChart3D_Android.NChartTexturePosition)">
             <summary>
             Create brush with image, background color and position of texture.
             
             </summary>
             <param name="image">- image for the brush.</param>
             <param name="color">- background color for the brush.</param>
             <param name="position">- position for the texture.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTextureBrush.#ctor(Android.Graphics.Bitmap)">
             <summary>
             Create brush with image.
             
             </summary>
             <param name="image">- image for the brush.</param>
            </member>
        <member name="P:NChart3D_Android.NChartTextureBrush.BackgroundColor">
             <summary>
             Color that fills the area around the texture (if any). If null, the area is filled with black color.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTextureBrush.Image">
             <summary>
             Image of the brush.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTextureBrush.Position">
             <summary>
             Position of the texture.
             
             See NChartTexturePosition
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTexturePosition">
             <summary>
             The TexturePosition enum provides constants that control position of texture.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTexturePosition.Center">
             <summary>
             Position texture at the center of the area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTexturePosition.Scale">
             <summary>
             Scale texture to fill the whole area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTexturePosition.ScaleKeepMaxAspect">
             <summary>
             Scale texture keeping aspect so, that it covers the whole area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTexturePosition.ScaleKeepMinAspect">
             <summary>
             Scale texture keeping aspect so, that it fits in the area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTexturePosition.TopLeftCorner">
             <summary>
             Position texture in the top left corner of the area.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTextureView">
             <summary>
             The NChartView class provides a view to display the chart. This view can be added anywhere to view the hierarchy of
             the app like Android's <code>TextureView</code>.
             <p />
             This view can only be used in a hardware accelerated window (when rendered in software, it wont draw anything).
             But it can be flawlessly used within complex containers like <code>ScrollView</code>.
             You have to call <code>cleanup</code> when disposing this view.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTextureView.Chart">
             <summary>
             Get chart instance. Created when the method is invoked for the first time.
             
             See NChart
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTextureView.CreateScreenshot">
             <summary>
             Create screenshot from view.
             
             </summary>
             <returns>taken screenshot</returns>
            </member>
        <member name="T:NChart3D_Android.NChartTimeAxis">
             <summary>
             The NChartTimeAxis class provides methods to display the time axis of the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.AnimationTime">
             <summary>
             Time that takes to play the whole time axis in seconds.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.AutohideTooltip">
             <summary>
             Flag indicating whether the tooltip should be hidden automatically when the user interactions end (true) or not (false).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.CurrentIndex">
             <summary>
             Current timestamp index (index of the timestamp tick where the handler stays).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.DataSource">
             <summary>
             Time axis data source.
             
             See NChartTimeAxisDataSource
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.Frame">
             <summary>
             Frame of the time axis in the view's coordinate system.
             The frame is a rect fully enclosing the entire time axis with its ticks, labels and control buttons, but not
             its tooltip. This rect is calculated during <code>updateData</code> call when the chat lays out its elements.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.Margin">
             <summary>
             Margin of the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.MinTickSpacing">
             <summary>
             Minimal spacing between neighbor ticks in pixels (the tick is the center place of the timestamp title, a kind of
             milestone on the axis). According to this value some timestamps can be hidden, if there are too many of them.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.Padding">
             <summary>
             Padding of the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickColor">
             <summary>
             Color used to display timestamp ticks.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickOffset">
             <summary>
             Offset of timestamp ticks (spacing between slider and ticks) in pixels. If positive, ticks are outside of slider,
             if negative, ticks may overlap the slider; so the outer border of the slider (including the slider's handler) is
             assumed as zero offset.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickShape">
             <summary>
             Shape of timestamp ticks.
             
             See NChartTimeAxisTickShape
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickSize">
             <summary>
             Size of ticks in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickTitlesColor">
             <summary>
             Color used to display timestamp titles.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickTitlesFont">
             <summary>
             Font used to display timestamp titles.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickTitlesLayout">
             <summary>
             Layout of timestamp titles.
             
             See NChartTimeAxisLabelsLayout
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickTitlesOffset">
             <summary>
             Offset of timestamp titles (spacing between the slider and titles) in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.TickTitlesPosition">
             <summary>
             Position of timestamp titles.
             
             See NChartTimeAxisLabelsPosition
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxis.Tooltip">
             <summary>
             Tooltip that appears over the handler. This is null by default.
             
             See NChartTimeAxisTooltip
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.GoToFirstTick">
             <summary>
             Go to the beginning of the timeline (without any user interactions).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.GoToLastTick">
             <summary>
             Go to the ending of the timeline (without any user interactions).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.GoToNextTick">
             <summary>
             Go to the next timestamp (without any user interactions).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.GoToPreviousTick">
             <summary>
             Go to the previous timestamp (without any user interactions).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.Play">
             <summary>
             Start playing the timeline (without any user interactions).
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetBeginButtonStateImages(Android.Graphics.Bitmap,Android.Graphics.Bitmap)">
             <summary>
             Set images for button "go to the beginning".
             
             </summary>
             <param name="normal">- image for the button's normal state.</param>
             <param name="pushed">- image for the button's pushed state.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetEndButtonStateImages(Android.Graphics.Bitmap,Android.Graphics.Bitmap)">
             <summary>
             Set images for button "go to the ending".
             
             </summary>
             <param name="normal">- image for the button's normal state.</param>
             <param name="pushed">- image for the button's pushed state.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetHandlerImage(Android.Content.Context,System.Int32)">
             <summary>
             Set image resource for the handler of the slider.
             
             </summary>
             <param name="context">- application context</param>
             <param name="resID">- resource id for the slider's handler.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetHandlerImage(Android.Graphics.Bitmap)">
             <summary>
             Set image for the handler of the slider.
             
             </summary>
             <param name="handler">- image for the slider's handler.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetImages(Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap,Android.Graphics.Bitmap)">
             <summary>
             Set all images used for time axis at once.
             This method automatically adjusts <code>tickSize</code> and <code>tickOffset</code> according to images provided.
             
             See GetTickSize
             See GetTickOffset
             </summary>
             <param name="beginNormal">- image for the begin button's normal state.</param>
             <param name="beginPushed">- image for the begin button's pushed state.</param>
             <param name="endNormal">- image for the end button's normal state.</param>
             <param name="endPushed">- image for the end button's pushed state.</param>
             <param name="playNormal">- image for the play button's normal state.</param>
             <param name="playPushed">- image for the play button's pushed state.</param>
             <param name="pauseNormal">- image for the pause button's normal state.</param>
             <param name="pausePushed">- image for the pause button's pushed state.</param>
             <param name="slider">- image for the slider.</param>
             <param name="handler">- image for the slider's handler.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetPauseButtonStateImages(Android.Content.Context,System.Int32,System.Int32)">
             <summary>
             Set image resources for button "pause".
             
             </summary>
             <param name="context">- application context</param>
             <param name="normalResID">- resource id for the button's normal state image.</param>
             <param name="pushedResID">- resource id for the button's pushed state image.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetPlayButtonStateImages(Android.Content.Context,System.Int32,System.Int32)">
             <summary>
             Set image resources for button "play".
             
             </summary>
             <param name="context">- application context</param>
             <param name="normalResID">- resource id for the button's normal state image.</param>
             <param name="pushedResID">- resource id for the button's pushed state image.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetSliderImage(Android.Content.Context,System.Int32,System.Single,System.Single)">
             <summary>
             Specify the image resource for the slider and the cap insets to stretch it. The cap insets specifies the stretchable caps of the image.
             
             </summary>
             <param name="context">- application context</param>
             <param name="resID">- resource id for the slider image.</param>
             <param name="leftInset">- left cap inset for the image.</param>
             <param name="rightInset">- right cap inset for the image.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.SetSliderImage(Android.Graphics.Bitmap,System.Single,System.Single)">
             <summary>
             Specify the image for the slider and the cap insets to stretch it. The cap insets specifies the stretchable caps of the image.
             
             </summary>
             <param name="slider">- image for the slider.</param>
             <param name="leftInset">- left cap inset for the image.</param>
             <param name="rightInset">- right cap inset for the image.</param>
            </member>
        <member name="M:NChart3D_Android.NChartTimeAxis.Stop">
             <summary>
             Stop playing the timeline (without any user interactions).
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTimeAxisLabelsLayout">
             <summary>
             The TimeAxisLabelsLayout enum provides constants to control the label's layout on the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisLabelsLayout.ShowAllLabels">
             <summary>
             Show all labels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisLabelsLayout.ShowFirstLastLabelsOnly">
             <summary>
             Show the first and the last labels only.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTimeAxisLabelsPosition">
             <summary>
             The TimeAxisLabelsPosition enum provides constants to the control label's positions on the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisLabelsPosition.Above">
             <summary>
             Place labels above the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisLabelsPosition.Beneath">
             <summary>
             Place labels beneath the time axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTimeAxisTickShape">
             <summary>
             The TimeAxisTickShape enum provides constants to control the shape of ticks on the time axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisTickShape.Line">
             <summary>
             Ticks in the shape of a line.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTimeAxisTickShape.Triangle">
             <summary>
             Ticks in the shape of a triangle.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTimeAxisTooltip">
             <summary>
             The NChartTimeAxisTooltip class provides methods to display the tooltip over the handler of the time axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTooltip">
             <summary>
             The NChartTooltip class provides methods to display the tooltip for the chart's points.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltip.AlwaysInPlotArea">
             <summary>
             Flag determining if the tooltip should always be inside of the chart's plot area. If true, the tooltip may be shifted
             to fit in the plot area when it's pivot is near the border of the chart's plot area. If false, it is never shifted
             and can overlap the axis when it's pivot is near the border of the chart's plot area. The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltip.DefaultArrowOrientation">
             <summary>
             Default orientation of the tooltip's arrow. The default value is NChartTooltipArrowOrientation.Bottom.
             <p />
             The default arrow orientation is the orientation tooltip uses if it's far from plot area borders.
             If it's close to border and IsAlwaysInPlotArea is set to true, it's arrow orientation is automatically changed to
             keep tooltip inside the plot area.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltip.VerticalAlignment">
             <summary>
             Vertical alignment of the tooltip. It is used if tooltip has no arrow presented, otherwise it is ignored.
             
             See NChartTooltipVerticalAlignment
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTooltip.SetVisibleAnimated(System.Boolean,System.Single)">
             <summary>
             Change visibility of tooltip animated.
             
             </summary>
             <param name="visible">- flag of visibility.</param>
             <param name="duration">- duration of animation in seconds.</param>
            </member>
        <member name="T:NChart3D_Android.NChartTooltipArrowOrientation">
             <summary>
             The NChartTooltipArrowOrientation enum provides constants to control direction of tooltip's arrow.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipArrowOrientation.Bottom">
             <summary>
             Direct arrow to the bottom.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipArrowOrientation.Left">
             <summary>
             Direct arrow to the left.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipArrowOrientation.None">
             <summary>
             No arrow.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipArrowOrientation.Right">
             <summary>
             Direct arrow to the right.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipArrowOrientation.Top">
             <summary>
             Direct arrow to the top.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTooltipVerticalAlignment">
             <summary>
             The TooltipVerticalAlignment enum provides constants for vertical alignment of the tooltip.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipVerticalAlignment.Bottom">
             <summary>
             Align tooltip on the bottom of it's pivot (the point it is connected with.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipVerticalAlignment.Center">
             <summary>
             Align tooltip with it's pivot (the point it is connected with in the center.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTooltipVerticalAlignment.Top">
             <summary>
             Align tooltip on the top of it's pivot (the point it is connected with.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTouchArea">
             <summary>
             The NChartTouchArea class provides methods to define touch area for NChartTouchAreaSeries.
             Area is defined in relative coordinates that should be in [0, 1]x[0, 1] and relates to the size of background set
             through NChartTouchAreaSeriesSettings. (0, 0) corresponds to the top-left corner of the background image, (1, 1) -
             to the bottom-right.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartTouchArea.#ctor">
             <summary>
             Initialize touch area with given area.
             
             </summary>
             <param name="area">- area for touch area.</param>
             <param name="series">- series for touch area.</param>
            </member>
        <member name="P:NChart3D_Android.NChartTouchArea.Area">
             <summary>
             Touch area rect.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTouchAreaSeries">
             <summary>
             The NChartTouchAreaSeries class provides methods to display fullscreen billboard with touch areas.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartTouchAreaSeriesSettings">
             <summary>
             The NChartTouchAreaSeriesSettings class provides global settings for NChartTouchAreaSeries.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTouchAreaSeriesSettings.AreasDebugMode">
             <summary>
             Flag allowing you to highlight touch ares with red for debug reasons (if true). The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartTouchAreaSeriesSettings.Background">
             <summary>
             Background image to display on the screen.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartUserInteraction">
             <summary>
             The UserInteraction class provides constants to control available user interaction. You can use them to build
             the mask of interactions availability by concatenating the needed ones with bitwise OR.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.All">
             <summary>
             All interactions are available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.HorizontalMove">
             <summary>
             Horizontal moving is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.HorizontalRotate">
             <summary>
             Rotation by horizontal moving is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.HorizontalZoom">
             <summary>
             Horizontal zoom is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.None">
             <summary>
             No interactions are available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.ProportionalZoom">
             <summary>
             Proportional zoom is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.Tap">
             <summary>
             Tap is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.VerticalMove">
             <summary>
             Vertical moving is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.VerticalRotate">
             <summary>
             Rotation by vertical moving is available.
             </summary>
            </member>
        <member name="F:NChart3D_Android.NChartUserInteraction.VerticalZoom">
             <summary>
             Vertical zoom is available.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartValue">
             <summary>
             The Value enum provides constants to indicate values from the point states.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.Close">
             <summary>
             Close value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.High">
             <summary>
             High value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.Low">
             <summary>
             Low value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.Open">
             <summary>
             Open value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.X">
             <summary>
             X value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.Y">
             <summary>
             Y value.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValue.Z">
             <summary>
             Z value.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartValueAxesType">
             <summary>
             The ValueAxesType enum provides constants of value axes types.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxesType.Absolute">
             <summary>
             Absolute type.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxesType.Additive">
             <summary>
             Additional type.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxesType.Percent">
             <summary>
             Percent type.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartValueAxis">
             <summary>
             The NChartValueAxis class provides methods to display the value axis of the chart.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.AlwaysShowZero">
             <summary>
             Flag that determines whether zero is always on the axis. This flag makes sense if GetMinValue and GetMaxValue are both
             less or greater than zero and are beautified according to the data source. In this case, if this flag is false, it
             may happen, that no zero will be on the axis (for example, if GetMinValue = 11.5 and GetMaxValue = 19, the axis will
             probably start with 10 and end with 20, having 4 steps). With this flag set to true, zero will always be on the axis,
             so even with GetMinValue = 11.5 and GetMaxValue = 19 the axis will start with 0 and end with 20 having probably 5 steps
             or so. The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Caption">
             <summary>
             Caption of the axis.
             
             See NChartLabel
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.CaptionIn3D">
             <summary>
             Flag that determines whether the axis caption is in "perspective" screen (true) or is projected in the 2D screen (false).
             This flag only affects 3D-charts. The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Color">
             <summary>
             Color of the axis line.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.DataSource">
             <summary>
             Data source of the axis.
             
             See NChartValueAxisDataSource
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.DateStep">
             <summary>
             Time interval from one date tick to another. It is either obtained from the data source or, if not provided,
             calculated according to the minDate and maxDate to look beautiful.
             This property works in date mode only, if hasDates is true. Otherwise it returns 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Delegate">
             <summary>
             Delegate of the axis.
             
             See NChartValueAxisDelegate
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Font">
             <summary>
             Font for the ticks' labels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.HasDates">
             <summary>
             Flag indicating if axis displays dates instead of values (true) or regular values (false). The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.HasOffset">
             <summary>
             Flag that determines if there should be an offset on the axis. The offset is the spacing from the beginning of the
             axis to the first tick and from the last tick to the end of the axis. If this flag is true, the spacing is half a step.
             If false, spacing is zero.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Kind">
             <summary>
             Kind of axis.
             
             See NChartValueAxisKind
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LabelsAlignment">
             <summary>
             Alignment of the axis labels relative to the axis ticks. The default value is NChartAxisLabelsAlignment.center
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LabelsAngle">
             <summary>
             Axis labels' rotation angle.
             
             See NChart#setDrawIn3D
             See NChartValueAxis#isLabelsIn3D
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LabelsIn3D">
             <summary>
             Flag that determines whether the axis labels are in "perspective" screen (true) or are projected in the 2D screen (false).
             This flag only affects 3D-charts. The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LabelsLineBreakMode">
             <summary>
             Line break mode for axis labels. The default value is NSLineBreakByWordWrapping.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LabelsVisible">
             <summary>
             Flag that determines if the labels of ticks are visible (true) or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Length">
             <summary>
             Length of axis in 3D scene units. This value is obtained from the data source or, if not provided, is assigned to 1.
             It has an effect for axes being displayed in 3D only. In 2D this value is ignored because axes fill the whole area
             available on the screen. One 3D scene unit is equal to half a screen size by initial zoom (so space of the 3D scene
             is actually nonlinear respective to the screen). Therefore, by default all axes have equal length and form a kind of
             cube in 3D that is centered on the screen and is as big as half of the biggest screen's dimension. However, if you
             want, for example, to make the Z-axis shorter than the others, you can provide a length of 0.5 for it. It will
             therefore be twice as short as the others.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LineDash">
             <summary>
             Dash of the crosshair.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LineVisible">
             <summary>
             Flag that determines if the line of the axis is visible (true) or not (false). The default value is false.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.LogarithmBase">
             <summary>
             Base of logarithm for logarithmic scale. The default value is 10.
             This property takes effect if IsLogarithmic is set to true only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Logarithmic">
             <summary>
             Flag determining if axis has logarithmic scale (true) or linear scale (false). The default value is false. The base of
             scale's logarithm is controlled by GetLogarithmBase property.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MajorTicks">
             <summary>
             Major ticks of the axis. Major ticks are spread from the GetMinValue to the GetMaxValue through GetStep or, if no
             GetMinValue and GetMaxValue are provided but a ticks array is provided, the whole axis length is divided by the number
             of ticks and for each tick there is a major tick displayed. Major ticks can be labeled.
             
             See NChartAxisTick
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MaxDate">
             <summary>
             Maximal date on the axis. It is obtained from the data source and, if needed, processed to look more beautiful.
             This property works in date mode only, if hasDates is true. Otherwise it returns null.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MaxLabelLength">
             <summary>
             Maximal allowed label length in pixels. If 0, maximal label width is calculated automatically according to the length
             between neighbor ticks. The default value is 0.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MaxValue">
             <summary>
             Maximal value on the axis. It is obtained from the data source and, if needed, processed to look more beautiful.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MinDate">
             <summary>
             Minimal date on the axis. It is obtained from the data source and, if needed, processed to look more beautiful.
             This property works in date mode only, if hasDates is true. Otherwise it returns null.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MinTickSpacing">
             <summary>
             Minimal spacing between neighbor ticks in pixels (the tick is the center place of the timestamp title, a kind of
             milestone on the axis). According to this value some timestamps can be hidden, if there are too many of them.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MinValue">
             <summary>
             Minimal value on the axis. It is obtained from the data source and, if needed, processed to look more beautiful.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.MinorTicks">
             <summary>
             Minor ticks of the axis. Minor ticks are displayed in the middle between two neighbor major ticks. See majorTicks
             for details.
             
             See NChartAxisTick
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.PositionX">
             <summary>
             Coordinate controlling horizontal position of the axis.
             See NChartAxisPositionCoord
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.PositionY">
             <summary>
             Coordinate controlling vertical position of the axis.
             See NChartAxisPositionCoord
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.PositionZ">
             <summary>
             Coordinate controlling depth position of the axis.
             See NChartAxisPositionCoord
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.ShouldAutoFitZoomByMinTickSpacing">
             <summary>
             Flag determining if zoom of the axis should be automatically fit according to the current GetMinTickSpacing (true) or
             not (false). The default value is false.
             Set this flag to true if you want to zoom the chart so that the maximal number of points is visible with
             no skipping of ticks on the axis. Best practice is to set this flag and call CalcOptimalMinTickSpacing.
             If this flag is set to true, zoom of the axis is changed automatically by each chart's layout. Zoom you set
             manually before layout will be ignored.
             Auto fitting works in 2D mode only.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.ShouldBeautifyMinAndMax">
             <summary>
             Flag that determines whether min and max values on the axis should be beautified in case they are calculated (true)
             or not (false). The default value is true.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Step">
             <summary>
             Step from one tick to another. It is either obtained from the data source or, if not provided, calculated according
             to the GetMinValue and GetMaxValue to look beautiful.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.TextColor">
             <summary>
             Color of the text for the ticks' labels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.Thickness">
             <summary>
             Thickness of the axis' line in pixels.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.TickCount">
             <summary>
             Number of ticks on the axis. It is the number of ticks in an array or the number of values between
             GetMinValue and GetMaxValue through GetStep.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.TinyTickIntervalsPerInterval">
             <summary>
             Number of tiny intervals the interval between two consecutive major ticks is split up into. Tiny intervals are
             bounded with the tiny ticks. The default value is 0, which means no tiny ticks are displayed.
             If for example this value is 10, that means each interval between two labels is split up into 10
             sub-intervals and therefore should have 11 tiny ticks inside.
             However, only 8 tiny ticks will be visible, and 1th, 6th and 11th ticks will be discarded, because they potentially
             overlap with major/minor ticks (even if major/minor ticks are switched off).
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxis.TinyTicks">
             <summary>
             Tiny ticks of the axis. Tiny ticks are displayed between consecutive major ticks. However there is a gap in tiny
             ticks where tiny ticks potentially overlap with major/minor ticks (even if major/minor ticks are switched off).
             See majorTicks, minorTicks and tinyTickIntervalsPerInterval for details.
             See NChartAxisTick
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.AddMark(NChart3D_Android.NChartValueAxisMark)">
             <summary>
             Add axis mark.
             
             </summary>
             <param name="mark">- mark to add.</param>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.CalcOptimalMinTickSpacing">
             <summary>
             Calculate optimal value for GetMinTickSpacing.
             Use this method if you want to get GetMinTickSpacing that corresponds to the actual lengths of axis ticks'
             labels.
             You should call this method _after_ the <code>updateData</code> call of the chart, because this method operates
             with the data obtained from data source. If you call it before the data are updated, the result will be wrong.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.FitZoomByMinTickSpacing(System.Single,System.Single)">
             <summary>
             Fit the zoom according to the current GetMinTickSpacing.
             Use this method if you want to zoom the chart so that the maximal number of points is visible with no
             skipping of ticks on the axis.
             This method requires frame of the chart to be determined. So if you call this method before the chart's layout,
             it will fail. If you want the axes to be automatically zoomed according to the GetMinTickSpacing, use the flag
             ShouldAutoFitZoomByMinTickSpacing.
             
             </summary>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.GetMarks">
             <summary>
             Array of axis marks.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.GetTicks">
             <summary>
             Array of strings that are displayed as ticks on the axis. It is obtained from the data source or null if not provided.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.RemoveAllMarks">
             <summary>
             Remove all axis marks.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.RemoveMark(NChart3D_Android.NChartValueAxisMark)">
             <summary>
             Remove axis mark.
             
             </summary>
             <param name="mark">- mark to remove.</param>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.ZoomToRegion(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Zoom to given region by specifying the least and the greatest values that should be visible on the axis. If the
             axis has array of ticks, indices in this array can be used. Use this method after you updated data of the chart
             with NChart.UpdateData call.
             
             </summary>
             <param name="startValue">- least value that should be visible.</param>
             <param name="endValue">- greatest value that should be visible.</param>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxis.ZoomToRegion(Java.Util.Date,Java.Util.Date,System.Single,System.Single)">
             <summary>
             Zoom to given region by specifying the earliest and the latest dates that should be visible on the axis.
             This method works in date mode only, if hasDates is true.
             Use this method after you updated data of the chart with <code>chart.updateData()</code> call.
             
             </summary>
             <param name="startDate">- earliest date that should be visible.</param>
             <param name="endDate">- latest date that should be visible.</param>
             <param name="duration">- duration of the animation in seconds.</param>
             <param name="delay">- delay of animation in seconds.</param>
            </member>
        <member name="T:NChart3D_Android.NChartValueAxisKind">
             <summary>
             The ValueAxisKind enum provides constants to indicate the value axes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.Azimuth">
             <summary>
             Azimuth-Axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.Radius">
             <summary>
             Radius-Axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.SX">
             <summary>
             Secondary X-axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.SY">
             <summary>
             Secondary Y-axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.SZ">
             <summary>
             Secondary Z-axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.X">
             <summary>
             X-axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.Y">
             <summary>
             Y-axis.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisKind.Z">
             <summary>
             Z-axis.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartValueAxisMark">
             <summary>
             The NChartValueAxisMark class provides methods to handle marks on the value axes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartValueAxisMark.Value">
             <summary>
             Value of the mark.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartValueAxisMark.Tick">
             <summary>
             Tick of the mark. It is invisible by default.
             </summary>
            </member>
        <member name="T:NChart3D_Android.NChartVector3">
             <summary>
             The NChartVector3 struct stores 3-dimensional coordinates.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartVector3.X">
             <summary>
             X coordinate.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartVector3.Y">
             <summary>
             Y coordinate.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartVector3.Z">
             <summary>
             Z coordinate.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartVector3.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Create NChartVector3 with given coordinates.
             
             </summary>
             <param name="x">- X coordinate.</param>
             <param name="y">- Y coordinate.</param>
             <param name="z">- Z coordinate.</param>
            </member>
        <member name="T:NChart3D_Android.NChartView">
             <summary>
             The NChartView class provides a view to display the chart. This view can be added anywhere to view the hierarchy of
             the app like Android's <code>GLSurfaceView</code>.
             <p />
             This view can be used both with software rendering and hardware accelerated rendering. But it's not recommended
             to use this view within complex containers like <code>ScrollView</code>. In case you need to have a chart inside
             <code>ScrollView</code> please use <code>NChartTextureView</code> instead.
             You have to call <code>cleanup</code> when disposing this view.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartView.Chart">
             <summary>
             Get chart instance. Created when the method is invoked for the first time.
             
             See NChart
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartView.Cleanup">
             <summary>
             Clean up memory. Call this method before deleting the view. Please, note that you have to call this method, or
             you will get memory leak.
             </summary>
            </member>
        <member name="M:NChart3D_Android.NChartView.CreateScreenshot">
             <summary>
             Create screenshot from view.
             
             </summary>
             <returns>last taken screenshot</returns>
            </member>
        <member name="T:NChart3D_Android.NChartZoomMode">
             <summary>
             The ZoomMode enum provides constants for different zoom modes.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartZoomMode.Directional">
             <summary>
             Zoom is enabled and is directional, so the user can zoom separately in the horizontal and vertical direction. By
             diagonal direction zoom is proportional. Direction is determined as a vector that connects the user's fingers
             during the pinch gesture.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartZoomMode.None">
             <summary>
             Zoom is disabled.
             </summary>
            </member>
        <member name="P:NChart3D_Android.NChartZoomMode.Proportional">
             <summary>
             Zoom is enabled and is always proportional.
             </summary>
            </member>
    </members>
</doc>
